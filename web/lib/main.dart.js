// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.AnalogClock = {"": "GalleryElement;clockRadius,centerX,centerY,anglePerSecond,anglePerMinute,anglePerHour,displayName,description,canvas,context",
  update$1: function(loop) {
    var t1, t2;
    t1 = this.canvas;
    t2 = $.getInterceptor$x(t1);
    this.clockRadius = $.min(t2.get$width(t1), t2.get$height(t1)) * 0.49;
    this.centerX = $.$div$n($.get$width$x(this.canvas), 2);
    this.centerY = $.$div$n($.get$height$x(this.canvas), 2);
  },
  get$update: function() {
    return new $.BoundClosure$1(this, "update$1");
  },
  render$1: function(loop) {
    var date, t1, t2, t3, t4, i, markLength, adjRatio, oppRatio, outerX, outerY;
    date = $.DateTime$_now();
    this.context.save();
    t1 = this.context;
    t2 = this.canvas;
    t3 = $.getInterceptor$x(t2);
    t1.clearRect(0, 0, t3.get$width(t2), t3.get$height(t2));
    this.context.lineWidth = 3;
    this.context.beginPath();
    t2 = this.context;
    t3 = this.canvas;
    t1 = $.getInterceptor$x(t3);
    t4 = $.$div$n(t1.get$width(t3), 2);
    t3 = $.$div$n(t1.get$height(t3), 2);
    t1 = this.clockRadius;
    t2.arc$6;
    t2.arc(t4, t3, t1, 0, 6.283185307179586, false);
    this.context.closePath();
    t1 = this.context;
    t1.setFillColorRgb$4;
    t1.fillStyle = "rgba(255, 255, 255, 1)";
    this.context.fill();
    for (t1 = this.anglePerMinute, i = 0; i < 60; ++i) {
      this.context.save();
      if ($.JSNumber_methods.$mod(i, 15) === 0)
        markLength = 30;
      else
        markLength = $.JSNumber_methods.$mod(i, 5) === 0 ? 20 : 10;
      t2 = t1 * i * 0.017453292519943295;
      adjRatio = Math.cos(t2);
      oppRatio = Math.sin(t2);
      t2 = this.clockRadius;
      t3 = $.getInterceptor$n(t2);
      outerX = t3.$mul(t2, adjRatio);
      outerY = t3.$mul(t2, oppRatio);
      t4 = t3.$sub(t2, markLength);
      t2 = t3.$sub(t2, markLength);
      this.context.translate(this.centerX, this.centerY);
      this.context.beginPath();
      this.context.moveTo(t4 * adjRatio, t2 * oppRatio);
      this.context.lineTo(outerX, outerY);
      this.context.closePath();
      t2 = this.context;
      t2.setStrokeColorRgb$4;
      t2.strokeStyle = "rgba(0, 0, 0, 1)";
      this.context.stroke();
      this.context.restore();
    }
    this.drawClockHand$5(this.anglePerHour * $.Primitives_getHours(date), $.$sub$n(this.clockRadius, 50), 0, 0, 255);
    this.drawClockHand$5(t1 * $.Primitives_getMinutes(date), $.$sub$n(this.clockRadius, 20), 255, 0, 0);
    this.drawClockHand$5(this.anglePerSecond * $.Primitives_getSeconds(date), this.clockRadius, 0, 255, 0);
    this.context.beginPath();
    t1 = this.context;
    t2 = this.canvas;
    t3 = $.getInterceptor$x(t2);
    t4 = $.$div$n(t3.get$width(t2), 2);
    t2 = $.$div$n(t3.get$height(t2), 2);
    t3 = this.clockRadius;
    t1.arc$6;
    t1.arc(t4, t2, t3, 0, 6.283185307179586, false);
    this.context.closePath();
    t3 = this.context;
    t3.setStrokeColorRgb$4;
    t3.strokeStyle = "rgba(0, 0, 0, 1)";
    this.context.stroke();
    this.context.restore();
  },
  get$render: function() {
    return new $.BoundClosure$1(this, "render$1");
  },
  drawClockHand$5: function(angle, $length, red, green, blue) {
    var t1, adjRatio, oppRatio, t2, t3, t4;
    this.context.save();
    this.context.translate(this.centerX, this.centerY);
    this.context.rotate(4.71238898038469);
    this.context.translate($.$negate$n(this.centerX), $.$negate$n(this.centerY));
    t1 = angle * 0.017453292519943295;
    adjRatio = Math.cos(t1);
    oppRatio = Math.sin(t1);
    t1 = $.getInterceptor$n($length);
    t2 = t1.$mul($length, adjRatio);
    t3 = this.centerX;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t1 = t1.$mul($length, oppRatio);
    t4 = this.centerY;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    this.context.beginPath();
    this.context.moveTo(this.centerX, this.centerY);
    this.context.lineTo(t2 + t3, t1 + t4);
    this.context.closePath();
    t4 = this.context;
    t4.setStrokeColorRgb$4;
    t4.strokeStyle = "rgba(" + red + ", " + green + ", " + blue + ", 1)";
    this.context.stroke();
    this.context.restore();
  }
};

$$.Ring = {"": "Object;x>,y>,red<,green<,blue<,radius@,maxRadius<,multiplier@,alpha*"};

$$.Rings = {"": "GalleryElement;rng,rings,displayName,description,canvas,context",
  generateRings$1: function(maxRings) {
    var t1, xBuffer, yBuffer, t2, i, max, t3, x, y, maxRadius, t4, t5;
    t1 = $.List_List(maxRings, $.Ring);
    t1.$builtinTypeInfo = [$.Ring];
    this.rings = t1;
    xBuffer = $.round$0$nx($.$mul$n($.get$width$x(this.canvas), 0.1));
    if (typeof xBuffer !== "number")
      return this.generateRings$1$bailout(1, maxRings, xBuffer);
    yBuffer = $.round$0$nx($.$mul$n($.get$height$x(this.canvas), 0.1));
    if (typeof yBuffer !== "number")
      return this.generateRings$1$bailout(2, maxRings, xBuffer, yBuffer);
    for (t1 = yBuffer * 2, t2 = xBuffer * 2, i = 0; i < maxRings; ++i) {
      max = $.$sub$n($.get$width$x(this.canvas), t2);
      t3 = $.getInterceptor$n(max);
      if (t3.$lt(max, 0))
        $.throwExpression($.ArgumentError$("negative max: " + $.S(max)));
      if (t3.$gt(max, 4294967295))
        max = 4294967295;
      x = (Math.random() * max >>> 0) + xBuffer;
      max = $.$sub$n($.get$height$x(this.canvas), t1);
      t3 = $.getInterceptor$n(max);
      if (t3.$lt(max, 0))
        $.throwExpression($.ArgumentError$("negative max: " + $.S(max)));
      if (t3.$gt(max, 4294967295))
        max = 4294967295;
      y = (Math.random() * max >>> 0) + yBuffer;
      maxRadius = $.toDouble$0$n($.IterableMixinWorkaround_reduce([x, y, $.$sub$n($.get$width$x(this.canvas), x), $.$sub$n($.get$height$x(this.canvas), y)], $.min$closure));
      t3 = Math.random();
      t4 = Math.random();
      t5 = this.rings;
      t4 = $.Ring$(x, y, t3 * maxRadius, maxRadius, 255, 255, 255, 1, t4 * 2 + 0.5);
      if (i >= t5.length)
        throw $.ioore(i);
      t5[i] = t4;
    }
  },
  generateRings$1$bailout: function(state0, maxRings, xBuffer, yBuffer) {
    switch (state0) {
      case 0:
        t1 = $.List_List(maxRings, $.Ring);
        t1.$builtinTypeInfo = [$.Ring];
        this.rings = t1;
        xBuffer = $.round$0$nx($.$mul$n($.get$width$x(this.canvas), 0.1));
      case 1:
        state0 = 0;
        yBuffer = $.round$0$nx($.$mul$n($.get$height$x(this.canvas), 0.1));
      case 2:
        var t1, t2, i, max, t3, x, y, maxRadius, t4, t5;
        state0 = 0;
        for (t1 = $.getInterceptor$n(yBuffer), t2 = $.getInterceptor$n(xBuffer), i = 0; i < maxRings; ++i) {
          max = $.$sub$n($.get$width$x(this.canvas), t2.$mul(xBuffer, 2));
          t3 = $.getInterceptor$n(max);
          if (t3.$lt(max, 0))
            $.throwExpression($.ArgumentError$("negative max: " + $.S(max)));
          if (t3.$gt(max, 4294967295))
            max = 4294967295;
          t3 = Math.random() * max >>> 0;
          if (typeof xBuffer !== "number")
            throw $.iae(xBuffer);
          x = t3 + xBuffer;
          max = $.$sub$n($.get$height$x(this.canvas), t1.$mul(yBuffer, 2));
          t3 = $.getInterceptor$n(max);
          if (t3.$lt(max, 0))
            $.throwExpression($.ArgumentError$("negative max: " + $.S(max)));
          if (t3.$gt(max, 4294967295))
            max = 4294967295;
          t3 = Math.random() * max >>> 0;
          if (typeof yBuffer !== "number")
            throw $.iae(yBuffer);
          y = t3 + yBuffer;
          maxRadius = $.toDouble$0$n($.IterableMixinWorkaround_reduce([x, y, $.$sub$n($.get$width$x(this.canvas), x), $.$sub$n($.get$height$x(this.canvas), y)], $.min$closure));
          t3 = Math.random();
          t4 = Math.random();
          t5 = this.rings;
          t4 = $.Ring$(x, y, t3 * maxRadius, maxRadius, 255, 255, 255, 1, t4 * 2 + 0.5);
          if (i >= t5.length)
            throw $.ioore(i);
          t5[i] = t4;
        }
    }
  },
  update$1: function(loop) {
    var t1, ring, t2, t3;
    t1 = this.canvas;
    $.set$width$x(t1, t1.clientWidth);
    t1 = this.canvas;
    $.set$height$x(t1, t1.clientHeight);
    for (t1 = $.get$iterator$ax(this.rings); t1.moveNext$0();) {
      ring = t1.get$current();
      ring.set$radius(ring.get$radius() + ring.get$multiplier());
      if (ring.get$multiplier() > 0) {
        t2 = ring.get$radius();
        t3 = ring.get$maxRadius();
        if (t2 > t3) {
          ring.set$radius(t3);
          ring.set$multiplier(ring.get$multiplier() * -1);
        }
      } else if (ring.get$radius() < 1) {
        ring.set$radius(1);
        ring.set$multiplier(ring.get$multiplier() * -1);
      }
    }
  },
  get$update: function() {
    return new $.BoundClosure$1(this, "update$1");
  },
  render$1: function(loop) {
    var t1, t2, t3, ring, t4, t5, t6;
    t1 = this.context;
    t2 = this.canvas;
    t3 = $.getInterceptor$x(t2);
    t1.clearRect(0, 0, t3.get$width(t2), t3.get$height(t2));
    for (t1 = $.get$iterator$ax(this.rings); t1.moveNext$0();) {
      ring = t1.get$current();
      t2 = $.getInterceptor$x(ring);
      t2.set$alpha(ring, ring.get$radius() / ring.get$maxRadius());
      this.context.beginPath();
      t3 = this.context;
      t4 = t2.get$x(ring);
      t5 = t2.get$y(ring);
      t6 = ring.get$radius();
      t3.arc$6;
      t3.arc(t4, t5, t6, 0, 6.283185307179586, false);
      this.context.closePath();
      t6 = this.context;
      t5 = ring.get$red();
      t4 = ring.get$green();
      t3 = ring.get$blue();
      t2 = t2.get$alpha(ring);
      t6.setStrokeColorRgb$4;
      t6.strokeStyle = "rgba(" + t5 + ", " + t4 + ", " + t3 + ", " + $.S(t2) + ")";
      this.context.stroke();
    }
  },
  get$render: function() {
    return new $.BoundClosure$1(this, "render$1");
  },
  Rings$3: function(canvas, context, maxRings) {
    var t1 = $.getInterceptor$x(canvas);
    this.generateRings$1($.JSNumber_methods.floor$0($.$div$n($.sqrt($.$add$ns($.pow(t1.get$width(canvas), 2), $.pow(t1.get$height(canvas), 2))), 4)));
  }
};

$$.Gallery = {"": "Object;game,canvas,context,elements,currentName,currentDescription",
  swapTo$1: function($name) {
    var t1, t2;
    this.currentName = $name;
    t1 = this.elements;
    this.currentDescription = t1.$index(t1, $name).get$description();
    this.context.setTransform(1, 0, 0, 1, 0, 0);
    t1 = this.game;
    t2 = this.elements;
    t1.onUpdate = t2.$index(t2, $name).get$update();
    t2 = this.game;
    t1 = this.elements;
    t2.onRender = t1.$index(t1, $name).get$render();
  },
  Gallery$0: function() {
    var t1, g;
    this.canvas = $.query("#gCanvas");
    t1 = this.canvas;
    $.set$width$x(t1, t1.clientWidth);
    t1 = this.canvas;
    $.set$height$x(t1, t1.clientHeight);
    this.game = $.GameLoopHtml$(this.canvas);
    this.context = $.get$context2D$x(this.canvas);
    t1 = this.game;
    t1.start$0(t1);
    this.elements = $.Map_Map($.JSString, $.GalleryElement);
    g = $.Rings$(this.canvas, this.context, 100);
    t1 = this.elements;
    t1.$indexSet(t1, g.displayName, g);
    g = $.AnalogClock$(this.canvas, this.context);
    t1 = this.elements;
    t1.$indexSet(t1, g.displayName, g);
  }
};

$$.GalleryElement = {"": "Object;description<"};

$$.main_closure = {"": "Closure;",
  call$1: function(i) {
    return $.add$1$ax($.galleryItems, i);
  }
};

$$.ListIterable = {"": "IterableBase;",
  get$iterator: function(_) {
    return $.ListIterator$(this);
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.forEach$1$bailout1(1, action, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  forEach$1$bailout1: function(state0, action, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.elementAt$1(this, i));
      if (!t1.$eq($length, this.get$length(this)))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  get$last: function(_) {
    if ($.$eq(this.get$length(this), 0))
      throw $.wrapException($.StateError$("No elements"));
    return this.elementAt$1(this, $.$sub$n(this.get$length(this), 1));
  },
  join$1: function(_, separator) {
    var $length, first, buffer, i, str;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.join$1$bailout1(1, separator, $length);
    if (separator.length !== 0) {
      if ($length === 0)
        return "";
      first = $.S(this.elementAt$1(this, 0));
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
      buffer = $.StringBuffer$(first);
      for (i = 1; i < $length; ++i) {
        buffer._contents = buffer._contents + separator;
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(this))
          throw $.wrapException($.ConcurrentModificationError$(this));
      }
      return buffer._contents;
    } else {
      buffer = $.StringBuffer$("");
      for (i = 0; i < $length; ++i) {
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(this))
          throw $.wrapException($.ConcurrentModificationError$(this));
      }
      return buffer._contents;
    }
  },
  join$1$bailout1: function(state0, separator, $length) {
    var t1, first, buffer, i, str;
    if (separator.length !== 0) {
      t1 = $.getInterceptor($length);
      if (t1.$eq($length, 0))
        return "";
      first = $.S(this.elementAt$1(this, 0));
      if (!t1.$eq($length, this.get$length(this)))
        throw $.wrapException($.ConcurrentModificationError$(this));
      buffer = $.StringBuffer$(first);
      for (i = 1; $.JSNumber_methods.$lt(i, $length); ++i) {
        buffer._contents = buffer._contents + separator;
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if (!t1.$eq($length, this.get$length(this)))
          throw $.wrapException($.ConcurrentModificationError$(this));
      }
      return buffer._contents;
    } else {
      buffer = $.StringBuffer$("");
      for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if (!t1.$eq($length, this.get$length(this)))
          throw $.wrapException($.ConcurrentModificationError$(this));
      }
      return buffer._contents;
    }
  },
  toList$1$growable: function(_, growable) {
    var $arguments, arguments0, t1, result, t2, i;
    if (growable) {
      $arguments = this.$asListIterable;
      arguments0 = $.getRuntimeTypeInfo(this);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t1 = $arguments == null ? null : $arguments[0];
      result = $.List_List($, t1);
      $arguments = this.$asListIterable;
      arguments0 = $.getRuntimeTypeInfo(this);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t1 = $arguments == null ? null : $arguments[0];
      result.$builtinTypeInfo = [t1];
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      t1 = this.get$length(this);
      $arguments = this.$asListIterable;
      arguments0 = $.getRuntimeTypeInfo(this);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t2 = $arguments == null ? null : $arguments[0];
      result = $.List_List(t1, t2);
      $arguments = this.$asListIterable;
      arguments0 = $.getRuntimeTypeInfo(this);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t1 = $arguments == null ? null : $arguments[0];
      result.$builtinTypeInfo = [t1];
    }
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(this)); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.SubListIterable = {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = this._iterable.length;
    t1 = this._endOrLength;
    if (t1 > $length)
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = this._iterable.length;
    t1 = this._start;
    if (t1 > $length)
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = this._iterable.length;
    t1 = this._start;
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (t2 >= $length)
      return $length - t1;
    return t2 - t1;
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    if (typeof index !== "number")
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        return this.elementAt$1$bailout2(3, index, t1, realIndex);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1)
      throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
    return $.JSArray_methods.elementAt$1(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1, realIndex) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
      case 3:
        if (state0 === 3 || state0 === 0 && !$.$lt$n(index, 0))
          switch (state0) {
            case 0:
              t1 = this.get$_endIndex();
            case 3:
              state0 = 0;
              t1 = $.$ge$n(realIndex, t1);
          }
        else
          t1 = true;
        if (t1)
          throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
        return $.JSArray_methods.elementAt$1(this._iterable, realIndex);
    }
  },
  $asListIterable: null,
  $asIterable: null
};

$$.ListIterator = {"": "Object;_iterable,_liblib$_length,_index,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._liblib$_length;
    t2 = this._iterable;
    if (!$.$eq(t1, $.get$length$asx(t2)))
      throw $.wrapException($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = $.elementAt$1$ax(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.MappedIterable = {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.MappedIterator$(t1.get$iterator(t1), this._f);
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  get$last: function(_) {
    var t1 = this._iterable;
    return this._f$1(t1.get$last(t1));
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  },
  $asIterableBase: function (S, T) { return [T]; },
  $asIterable: function (S, T) { return [T]; }
};

$$.MappedIterator = {"": "Iterator;_liblib$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$.ToString__emitPair_closure = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    t1.write$1(": ");
    $.ToString__emitObject(v, t1, t2);
  }
};

$$.HashMap_values_closure = {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
};

$$.HashMapKeyIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib0$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.HashMapKeyIterator$(t1, t1._computeKeys$0());
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw $.wrapException($.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.HashMapKeyIterator = {"": "Object;_map,_keys,_offset,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._liblib0$_current = null;
      return false;
    } else {
      this._liblib0$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
};

$$.LinkedHashMap_values_closure = {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
};

$$.LinkedHashMapCell = {"": "Object;_key<,_value@,_next@,_previous"};

$$.LinkedHashMapKeyIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib0$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.LinkedHashMapKeyIterator$(t1, t1._modifications);
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key());
      if (modifications !== t1._modifications)
        throw $.wrapException($.ConcurrentModificationError$(t1));
      cell = cell.get$_next();
    }
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.LinkedHashMapKeyIterator = {"": "Object;_map,_modifications,_cell,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib0$_current = null;
        return false;
      } else {
        this._liblib0$_current = t1.get$_key();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  },
  LinkedHashMapKeyIterator$2: function(_map, _modifications) {
    this._cell = this._map._first;
  }
};

$$.NoSuchMethodError_toString_closure = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2, str, t3;
    t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0)) {
      t2 = t1.sb_0;
      t2._contents = t2._contents + ", ";
    }
    t2 = t1.sb_0;
    str = typeof key === "string" ? key : $.S(key);
    t2._contents = t2._contents + str;
    t2 = t1.sb_0;
    t2._contents = t2._contents + ": ";
    t2 = t1.sb_0;
    t3 = $.Error_safeToString(value);
    t2._contents = t2._contents + t3;
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  }
};

$$.Interceptor = {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.Primitives_objectTypeName(receiver) + "'";
  }
};

$$.JSBool = {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
};

$$.JSNull = {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
};

$$.CloseToken = {"": "Object;", $isCloseToken: true};

$$.JsIsolateSink = {"": "EventSink;_isClosed,_port<",
  add$1: function(_, message) {
    this._port.send$1(message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port());
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asIsolateSink: null,
  $isIsolateSink: true
};

$$._Manager = {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      if (t2 != null) {
        $.get$IsolateNatives_thisScript();
        t2 = true;
      } else
        t2 = false;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    var t1, t2;
    if (this.isWorker === true) {
      t1 = this.isolates;
      t1.get$isEmpty;
      t1 = t1._liblib0$_length === 0 && this.topEventLoop.activeTimerCount === 0;
    } else
      t1 = false;
    if (t1) {
      t1 = this.mainManager;
      t2 = $._serializeMessage($.makeLiteralMap(["command", "close"]));
      t1.postMessage$1;
      self.postMessage(t2);
    }
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map($.JSInt, $._IsolateContext);
    this.managers = $.Map_Map($.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id>,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw $.wrapException($._ExceptionImplementation$("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._liblib0$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = $.Map_Map($.JSInt, $.ReceivePort);
    this.isolateStatics = new Isolate();
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount",
  enqueue$3: function(isolate, fn, msg) {
    this.events._add$1($._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._liblib0$_length === 0)
      throw $.wrapException($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $._StackTrace$(exception.stack);
        t1 = $globalState.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)]));
        t1.postMessage$1;
        self.postMessage(t2);
      }

  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_run(this);
  }
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;"};

$$.IsolateNatives__processWorkerMessage_closure = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.lazyPort = $.ReceivePortImpl$();
    this.replyTo_1.send$2("spawned", $._Isolate_port().toSendPort$0());
    this.entryPoint_0.call$0();
  }
};

$$._BaseSendPort = {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._AsyncCompleter$(null);
    port = $.ReceivePortImpl$();
    this.send$2(message, $._NativeJsSendPort$(port, $.get$id$x($globalState.currentContext)));
    port._callback = new $._BaseSendPort_call_closure(completer, port);
    return completer.future;
  },
  $isSendPort: true
};

$$._BaseSendPort_call_closure = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1._callback = null;
    $globalState.currentContext.unregister$1(t1._id);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException) {
      if (t1._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t1._isComplete = true;
      t1._setFutureError$1(value);
    } else {
      if (t1._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t1._isComplete = true;
      t1._setFutureValue$1(value);
    }
  }
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._NativeJsSendPort_send_closure = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && !$.$eq($.get$id$x($globalState.currentContext), t2.get$_isolateId());
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    t3 = $globalState.topEventLoop;
    t4 = "receive " + $.S(msg);
    t3.enqueue$3;
    t3.events._add$1($._IsolateEvent$(isolate, new $._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), t4));
  }
};

$$._NativeJsSendPort_send__closure = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1.get$_receivePort()._callback$2(t2.msg_0, t2.reply_1);
    }
  }
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_closure(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort) {
      other;
      t1 = $.$eq(this._workerId, other._workerId) && $.$eq(this._isolateId, other._isolateId) && $.$eq(this._receivePortId, other._receivePortId);
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = $.$shl$n(this._workerId, 16);
    t2 = $.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort_send_closure = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.postMessage$1;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  }
};

$$.ReceivePortImpl = {"": "Object;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $.get$id$x($globalState.currentContext));
  },
  ReceivePortImpl$0: function() {
    $.register$2$x($._globalState().currentContext, this._id, this);
  }
};

$$._waitForPendingPorts_closure = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_closure(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1.$indexSet(t1, map, true);
    t1 = map.get$values(map);
    t1.forEach$1(t1, new $._PendingSendPortFinder_visitMap_closure(this));
  },
  visitSendPort$1: function(port) {
    if (false)
      this.ports.push(port.get$_futurePort());
  },
  visitIsolateSink$1: function(sink) {
    var t1 = sink._port;
    if (false)
      this.ports.push(t1.get$_futurePort());
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._PendingSendPortFinder_visitList_closure = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$._PendingSendPortFinder_visitMap_closure = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return $._NativeJsSendPort$(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return $._WorkerSendPort$(x._workerId, x._isolateId, x._receivePortId);
    throw $.wrapException("Illegal underlying port " + $.S(this.get$p()));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed, result;
    isClosed = sink._isClosed;
    result = $.JsIsolateSink$fromPort(this.visitSendPort$1(sink._port));
    result._isClosed = isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, isClosed, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    isClosed = t1.$index(list, 2);
    result = $.JsIsolateSink$fromPort(port);
    result._isClosed = isClosed;
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return $.C_CloseToken;
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    $.throwExpression("Message serialization: Illegal value " + $.S(x) + " passed");
    return;
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.HashMap$(null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
};

$$._Copier_visitMap_closure = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    $.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  }
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id, keys;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = map.get$keys();
    keys = this._serializeList$1(t1.toList$0(t1));
    t1 = map.get$values(map);
    return ["map", id, keys, this._serializeList$1(t1.toList$0(t1))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len, null);
    for (t2 = result.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap$(null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    t1 = $.getInterceptor(x);
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        $.throwExpression("Unexpected serialized object");
        return;
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.getInterceptor(dartList).$isJavaScriptIndexingBehavior)
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    for (i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.HashMap$(null, null);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.getInterceptor(keys).$isJavaScriptIndexingBehavior))
      return this._deserializeMap$1$bailout(1, t1, x, result, keys);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.getInterceptor(values).$isJavaScriptIndexingBehavior))
      return this._deserializeMap$1$bailout(2, 0, 0, result, keys, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, t1, x, result, keys, values) {
    switch (state0) {
      case 0:
        result = $.HashMap$(null, null);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, len, i;
        state0 = 0;
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
        for (t2 = $.getInterceptor$asx(values), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle?",
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if (milliseconds === 0)
      t1 = !$.hasTimer() || $._globalState().isWorker === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().topEventLoop.enqueue$3($._globalState().currentContext, callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer()) {
      t1 = $._globalState().topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(new $.TimerImpl_internalCallback(this, callback), 0), milliseconds);
    } else
      throw $.wrapException($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.TimerImpl_internalCallback = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
  }
};

$$.JSArray = {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("add"));
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("removeLast"));
    if (receiver.length === 0)
      throw $.wrapException($.RangeError$value(-1));
    return receiver.pop();
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = $.get$iterator$ax(collection); t1.moveNext$0() === true;)
      this.add$1(receiver, t1.get$current());
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    if (start < 0 || start > receiver.length)
      throw $.wrapException($.RangeError$range(start, 0, receiver.length));
    if (end == null)
      end = receiver.length;
    else {
      throw $.wrapException($.ArgumentError$(end));
      if ($.JSNull_methods.$lt(end, start) || $.JSNull_methods.$gt(end, receiver.length))
        throw $.wrapException($.RangeError$range(end, start, receiver.length));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.wrapException($.StateError$("No elements"));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("set range"));
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(receiver, result, $.List_List($, null));
    return result._contents;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.wrapException($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    receiver[index] = value;
  },
  $asInterceptor: null,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
};

$$.JSMutableArray = {"": "JSArray;", $asList: function() { return [null]; }, $asIterable: function() { return [null]; }};

$$.JSFixedArray = {"": "JSMutableArray;"};

$$.JSExtendableArray = {"": "JSMutableArray;"};

$$.DartError = {"": "Object;",
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.stack == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.stack);
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper$closure.call$0;
  }
};

$$._StackTrace = {"": "Object;_stack",
  toString$0: function(_) {
    var t1 = this._stack;
    return t1 != null ? t1 : "";
  }
};

$$.invokeClosure_closure = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
};

$$.invokeClosure_closure0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
};

$$.invokeClosure_closure1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
};

$$.Null = {"": "Object;"};

$$.CastErrorImplementation = {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
};

$$.JSNumber = {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var t1, bIsNegative;
    if (typeof b !== "number")
      throw $.wrapException($.ArgumentError$(b));
    else
      b;
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      t1 = receiver === 0;
      if (t1) {
        bIsNegative = this.get$isNegative(b);
        if ((t1 ? 1 / receiver < 0 : receiver < 0) === bIsNegative)
          return 0;
        if (t1 ? 1 / receiver < 0 : receiver < 0)
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  floor$0: function(receiver) {
    var t1, truncated;
    t1 = Math.floor(receiver);
    if (isNaN(t1))
      $.throwExpression($.UnsupportedError$("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression($.UnsupportedError$("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return truncated == -0.0 ? 0 : truncated;
  },
  round$0: function(receiver) {
    var t1, truncated;
    t1 = this.roundToDouble$0(receiver);
    if (isNaN(t1))
      $.throwExpression($.UnsupportedError$("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression($.UnsupportedError$("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return truncated == -0.0 ? 0 : truncated;
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    return receiver / other;
  },
  $mul: function(receiver, other) {
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    var t1, truncated;
    t1 = receiver / other;
    if (isNaN(t1))
      $.throwExpression($.UnsupportedError$("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression($.UnsupportedError$("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return truncated == -0.0 ? 0 : truncated;
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.wrapException($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $and: function(receiver, other) {
    return (receiver & other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true
};

$$.JSInt = {"": "int/JSNumber;", $isint: true, $isnum: true};

$$.JSDouble = {"": "double/JSNumber;", $isdouble: true, $isnum: true};

$$.JSString = {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.wrapException($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.wrapException($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      $.throwExpression($.ArgumentError$(endIndex));
    if (startIndex < 0)
      throw $.wrapException($.RangeError$value(startIndex));
    if ($.JSInt_methods.$gt(startIndex, endIndex))
      throw $.wrapException($.RangeError$value(startIndex));
    if ($.$gt$n(endIndex, receiver.length))
      throw $.wrapException($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw $.wrapException($.ArgumentError$(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i;
    for (hash = 0, i = 0; i < receiver.length; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
};

$$._Random = {"": "Object;"};

$$._Completer = {"": "Object;"};

$$._AsyncCompleter = {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    $.get$_asyncCallbacks().push(new $._AsyncCompleter__setFutureValue_closure(value, this.future));
    if (!$._callbacksAreEnqueued) {
      $.Timer_run($._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  _setFutureError$1: function(error) {
    $.get$_asyncCallbacks().push(new $._AsyncCompleter__setFutureError_closure(error, this.future));
    if (!$._callbacksAreEnqueued) {
      $.Timer_run($._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  $as_Completer: null
};

$$._AsyncCompleter__setFutureValue_closure = {"": "Closure;value_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.value_0);
  }
};

$$._AsyncCompleter__setFutureError_closure = {"": "Closure;error_0,future_1",
  call$0: function() {
    this.future_1._setError$1(this.error_0);
  }
};

$$._FutureListenerWrapper = {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state@,_resultOrListeners<",
  then$2$onError: function(f, onError) {
    var t1;
    if (onError == null) {
      t1 = $._ThenFuture$(f, null, null);
      t1._subscribeTo$1(this);
      return t1;
    }
    t1 = $._SubscribeFuture$(f, onError, null, null);
    t1._subscribeTo$1(this);
    return t1;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1 = $._CatchErrorFuture$(f, test, null);
    t1._subscribeTo$1(this);
    return t1;
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this._state !== 0)
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this._state !== 0)
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = (this._state | 4) >>> 0;
    $.get$_asyncCallbacks().push(new $._FutureImpl__scheduleUnhandledError_closure(this));
    if (!$._callbacksAreEnqueued) {
      $.Timer_run($._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  _addListener$1: function(listener) {
    var t1 = this._state;
    if (t1 !== 0) {
      this._state = (t1 & 4294967291) >>> 0;
      $.get$_asyncCallbacks().push(new $._FutureImpl__addListener_closure(this, listener));
      if (!$._callbacksAreEnqueued) {
        $.Timer_run($._asyncRunCallback$closure);
        $._callbacksAreEnqueued = true;
      }
    } else {
      listener.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    var t1 = this._state;
    if (t1 === 0)
      this._addListener$1($._FutureListenerWrapper$(future));
    else if (t1 === 1)
      future._setValue$1(this._resultOrListeners);
    else {
      this._state = (t1 & 4294967291) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture) {
      result;
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    } else
      this._setValue$1(result);
  },
  _FutureImpl$immediate$1: function(value, T) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._FutureImpl__FutureImpl$wait_handleError = {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1 = t1.completer_0;
      t1.completeError$2;
      if (t1._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t1._isComplete = true;
      t1._setFutureError$1(error);
    }
  }
};

$$._FutureImpl__FutureImpl$wait_closure = {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0)) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2.complete$1;
      if (t2._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t2._isComplete = true;
      t2._setFutureValue$1(t1);
    }
  }
};

$$._FutureImpl__scheduleUnhandledError_closure = {"": "Closure;this_0",
  call$0: function() {
    var t1, t2, error, trace;
    t1 = this.this_0;
    t2 = t1.get$_state();
    if ((t2 & 4) !== 0) {
      t1.set$_state((t2 & 4294967291) >>> 0);
      error = t1.get$_resultOrListeners();
      $.Primitives_printString("Uncaught Error: " + $.S(error));
      trace = $.getAttachedStackTrace(error);
      if (trace != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(trace) + "\n");
      throw $.wrapException(error);
    }
  }
};

$$._FutureImpl__addListener_closure = {"": "Closure;this_0,listener_1",
  call$0: function() {
    var t1, t2, value;
    t1 = this.this_0;
    t2 = t1.get$_state();
    value = t1.get$_resultOrListeners();
    t1 = this.listener_1;
    if (t2 === 1)
      t1._sendValue$1(value);
    else
      t1._sendError$1(value);
  }
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener@",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $._StackTrace$(exception.stack);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_TransformFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error);
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $._StackTrace$(exception.stack);
        this._setError$1($._asyncError(e, s));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = $._StackTrace$(exception.stack);
      this._setError$1($._asyncError(e0, s0));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $._StackTrace$(exception.stack);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_ThenFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$.Stream = {"": "Object;",
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$($.JSInt);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_length_closure(t1), true, new $.Stream_length_closure0(t1, future), future.get$_setError());
    return future;
  },
  get$isEmpty: function(_) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$($.JSBool);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_isEmpty_closure(t1, future), true, new $.Stream_isEmpty_closure0(future), future.get$_setError());
    return future;
  },
  get$last: function(_) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$($.getRuntimeTypeArgument(this, this.$asStream, 0));
    t1.result_0 = null;
    t1.foundResult_1 = false;
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_last_closure(t1, this), true, new $.Stream_last_closure0(t1, future), future.get$_setError());
    return future;
  },
  elementAt$1: function(_, index) {
    var t1, t2, $arguments, arguments0, future;
    t1 = {};
    t1.index_0 = index;
    t2 = t1.index_0;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || $.$lt$n(t2, 0))
      throw $.wrapException($.ArgumentError$(t2));
    $arguments = this.$asStream;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t2 = $arguments == null ? null : $arguments[0];
    future = $._FutureImpl$(t2);
    t1.subscription_1 = null;
    t1.subscription_1 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_elementAt_closure(t1, future), true, new $.Stream_elementAt_closure0(future), future.get$_setError());
    return future;
  }
};

$$.Stream_length_closure = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  }
};

$$.Stream_length_closure0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  }
};

$$.Stream_isEmpty_closure = {"": "Closure;box_0,future_1",
  call$1: function(_) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._setValue$1(false);
  }
};

$$.Stream_isEmpty_closure0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setValue$1(true);
  }
};

$$.Stream_last_closure = {"": "Closure;box_0,this_1",
  call$1: function(value) {
    var t1 = this.box_0;
    t1.foundResult_1 = true;
    t1.result_0 = value;
  }
};

$$.Stream_last_closure0 = {"": "Closure;box_0,future_2",
  call$0: function() {
    var t1 = this.box_0;
    if (t1.foundResult_1) {
      this.future_2._setValue$1(t1.result_0);
      return;
    }
    this.future_2._setError$1($.StateError$("No elements"));
  }
};

$$.Stream_elementAt_closure = {"": "Closure;box_0,future_1",
  call$1: function(value) {
    var t1 = this.box_0;
    if ($.$eq(t1.index_0, 0)) {
      t1.subscription_1.cancel$0();
      this.future_1._setValue$1(value);
      return;
    }
    t1.index_0 = $.$sub$n(t1.index_0, 1);
  }
};

$$.Stream_elementAt_closure0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setError$1($.StateError$("Not enough elements for elementAt"));
  }
};

$$.StreamSubscription = {"": "Object;"};

$$.EventSink = {"": "Object;"};

$$.Timer_run_closure = {"": "Closure;",
  call$0: function() {
    var runCallbacks, i, callback, newCallbacks, exception;
    runCallbacks = $.get$Timer__runCallbacks();
    $.Timer__runCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(runCallbacks)); i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(runCallbacks, i);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        newCallbacks = $.get$Timer__runCallbacks();
        $.Timer__runCallbacks = [];
        i = $.$add$ns(i, 1);
        $.JSArray_methods.addAll$1($.get$Timer__runCallbacks(), $.sublist$1$ax(runCallbacks, i));
        $.JSArray_methods.addAll$1($.get$Timer__runCallbacks(), newCallbacks);
        throw exception;
      }

    }
  }
};

$$.HashMap = {"": "Object;_liblib0$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  get$keys: function() {
    return $.HashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asHashMap, 0));
  },
  get$values: function(_) {
    var t1 = this.get$keys();
    return t1.map$1(t1, new $.HashMap_values_closure(this));
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      if (value == null)
        strings[key] = strings;
      else
        strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      if (value == null)
        nums[key] = nums;
      else
        nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib0$_length = this._liblib0$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      this._liblib0$_length = this._liblib0$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib0$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var entry, value;
    if (table != null && table[key] != null) {
      entry = table[key];
      value = entry === table ? null : entry;
      delete table[key];
      this._liblib0$_length = this._liblib0$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  $isMap: true
};

$$.IterableBase = {"": "Object;",
  map$1: function(_, f) {
    var $arguments, arguments0, t1;
    $arguments = this.$asIterableBase;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    return $.MappedIterable$(this, f, t1, null);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    var $arguments, arguments0, t1;
    $arguments = this.$asIterableBase;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    return $.List_List$from(this, growable, t1);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return this.get$iterator(this).moveNext$0() !== true;
  },
  get$last: function(_) {
    var it, result;
    it = this.get$iterator(this);
    if (it.moveNext$0() !== true)
      throw $.wrapException($.StateError$("No elements"));
    do
      result = it.get$current();
    while (it.moveNext$0() === true);
    return result;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw $.wrapException($.RangeError$value(index));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = $.getInterceptor(remaining);
      if (t2.$eq(remaining, 0))
        return element;
      remaining = t2.$sub(remaining, 1);
    }
    throw $.wrapException($.RangeError$value(index));
  },
  $isIterable: true,
  $asIterable: null
};

$$.LinkedHashMap = {"": "Object;_liblib0$_length,_strings,_nums,_rest,_first,_last,_modifications",
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_value());
      if (modifications !== this._modifications)
        throw $.wrapException($.ConcurrentModificationError$(this));
      cell = cell.get$_next();
    }
  },
  get$keys: function() {
    return $.LinkedHashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asLinkedHashMap, 0));
  },
  get$values: function(_) {
    var t1 = this.get$keys();
    return t1.map$1(t1, new $.LinkedHashMap_values_closure(this));
  },
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_value(value);
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = $.LinkedHashMapCell$(key, value);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last._next = cell;
      this._last = cell;
    }
    this._liblib0$_length = this._liblib0$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  $isMap: true
};

$$.ListMixin = {"": "Object;",
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw $.wrapException($.ConcurrentModificationError$(receiver));
    }
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  get$last: function(receiver) {
    if (this.get$length(receiver) === 0)
      throw $.wrapException($.StateError$("No elements"));
    return this.$index(receiver, this.get$length(receiver) - 1);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, t1 + 1);
    this.$indexSet(receiver, t1, element);
  },
  addAll$1: function(receiver, iterable) {
    var t1, element, t2;
    for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = this.get$length(receiver);
      this.set$length(receiver, t2 + 1);
      this.$indexSet(receiver, t2, element);
    }
  },
  removeLast$0: function(receiver) {
    var result;
    if (this.get$length(receiver) === 0)
      throw $.wrapException($.StateError$("No elements"));
    result = this.$index(receiver, this.get$length(receiver) - 1);
    this.set$length(receiver, this.get$length(receiver) - 1);
    return result;
  },
  _rangeCheck$2: function(receiver, start, end) {
    var t1 = $.getInterceptor$n(start);
    if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(receiver)))
      throw $.wrapException($.RangeError$range(start, 0, this.get$length(receiver)));
    t1 = $.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, this.get$length(receiver)))
      throw $.wrapException($.RangeError$range(end, start, this.get$length(receiver)));
  },
  sublist$2: function(receiver, start, end) {
    var $length, $arguments, arguments0, t1, result, i, t2;
    if (typeof start !== "number")
      return this.sublist$2$bailout(1, start, end, receiver);
    if (end == null)
      end = this.get$length(receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = $.$sub$n(end, start);
    if (typeof $length !== "number")
      return this.sublist$2$bailout(2, start, 0, receiver, $length);
    $arguments = receiver.$asListMixin;
    arguments0 = $.getRuntimeTypeInfo(receiver);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    result = $.List_List($, t1);
    $arguments = receiver.$asListMixin;
    arguments0 = $.getRuntimeTypeInfo(receiver);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    result.$builtinTypeInfo = [t1];
    $.JSArray_methods.set$length(result, $length);
    for (t1 = result.length, i = 0; i < $length; ++i) {
      t2 = this.$index(receiver, start + i);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  sublist$2$bailout: function(state0, start, end, receiver, $length) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (end == null)
          end = this.get$length(receiver);
        this._rangeCheck$2(receiver, start, end);
        $length = $.$sub$n(end, start);
      case 2:
        var $arguments, arguments0, t1, result, i, t2;
        state0 = 0;
        $arguments = receiver.$asListMixin;
        arguments0 = $.getRuntimeTypeInfo(receiver);
        if ($arguments != null && $arguments.constructor === Array)
          ;
        else
          $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
        t1 = $arguments == null ? null : $arguments[0];
        result = $.List_List($, t1);
        $arguments = receiver.$asListMixin;
        arguments0 = $.getRuntimeTypeInfo(receiver);
        if ($arguments != null && $arguments.constructor === Array)
          ;
        else
          $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
        t1 = $arguments == null ? null : $arguments[0];
        result.$builtinTypeInfo = [t1];
        $.JSArray_methods.set$length(result, $length);
        for (t1 = $.getInterceptor$ns(start), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
          t2 = this.$index(receiver, t1.$add(start, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(receiver, result, $.List_List($, null));
    return result._contents;
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
};

$$.ListQueue = {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        $.throwExpression($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  get$last: function(_) {
    var t1, t2, t3;
    t1 = this._head;
    t2 = this._tail;
    if (t1 === t2)
      throw $.wrapException($.StateError$("No elements"));
    t1 = this._table;
    t3 = t1.length;
    t2 = (t2 - 1 & t3 - 1) >>> 0;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    return t1[t2];
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$gt(index, (this._tail - this._head & this._table.length - 1) >>> 0))
      throw $.wrapException($.RangeError$range(index, 0, (this._tail - this._head & this._table.length - 1) >>> 0));
    t1 = this._table;
    t2 = this._head;
    if (typeof index !== "number")
      throw $.iae(index);
    t3 = t1.length;
    t2 = (t2 + index & t3 - 1) >>> 0;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    return t1[t2];
  },
  toList$1$growable: function(_, growable) {
    var $arguments, arguments0, t1, list, t2, t3, t4;
    if (growable) {
      $arguments = this.$asListQueue;
      arguments0 = $.getRuntimeTypeInfo(this);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t1 = $arguments == null ? null : $arguments[0];
      list = $.List_List($, t1);
      $arguments = this.$asListQueue;
      arguments0 = $.getRuntimeTypeInfo(this);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t1 = $arguments == null ? null : $arguments[0];
      list.$builtinTypeInfo = [t1];
      $.JSArray_methods.set$length(list, (this._tail - this._head & this._table.length - 1) >>> 0);
    } else {
      t1 = this._tail;
      t2 = this._head;
      t3 = this._table;
      $arguments = this.$asListQueue;
      arguments0 = $.getRuntimeTypeInfo(this);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t4 = $arguments == null ? null : $arguments[0];
      list = $.List_List((t1 - t2 & t3.length - 1) >>> 0, t4);
      $arguments = this.$asListQueue;
      arguments0 = $.getRuntimeTypeInfo(this);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t1 = $arguments == null ? null : $arguments[0];
      list.$builtinTypeInfo = [t1];
    }
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(this, result, $.List_List($, null));
    return result._contents;
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    this._tail = (this._tail - 1 & this._table.length - 1) >>> 0;
    t1 = this._table;
    t2 = this._tail;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var t1, $arguments, arguments0, t2, newTable, split;
    t1 = this._table;
    $arguments = this.$asListQueue;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t2 = $arguments == null ? null : $arguments[0];
    newTable = $.List_List(t1.length * 2, t2);
    $arguments = this.$asListQueue;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    newTable.$builtinTypeInfo = [t1];
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    if (!!newTable.immutable$list)
      $.throwExpression($.UnsupportedError$("set range"));
    $.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    if (!!newTable.immutable$list)
      $.throwExpression($.UnsupportedError$("set range"));
    $.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, t3, $length, firstPartSize;
    t1 = this._head;
    t2 = this._tail;
    t3 = this._table;
    if (t1 <= t2) {
      $length = t2 - t1;
      $.JSArray_methods.setRange$4(target, 0, $length, t3, t1);
      return $length;
    } else {
      firstPartSize = t3.length - t1;
      $.JSArray_methods.setRange$4(target, 0, firstPartSize, t3, t1);
      $.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + this._tail, this._table, 0);
      return this._tail + firstPartSize;
    }
  },
  ListQueue$1: function(initialCapacity, E) {
    var t1;
    if (initialCapacity == null || $.JSNull_methods.$lt(initialCapacity, 8))
      initialCapacity = 8;
    else if (!$.ListQueue__isPowerOf2(initialCapacity))
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    t1 = $.List_List(initialCapacity, E);
    $.setRuntimeTypeInfo(t1, [E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $asIterable: null,
  $isIterable: true
};

$$._ListQueueIterator = {"": "Object;_queue,_liblib0$_end,_modificationCount,_liblib0$_position,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      $.throwExpression($.ConcurrentModificationError$(t1));
    t2 = this._liblib0$_position;
    if (t2 === this._liblib0$_end) {
      this._liblib0$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib0$_current = t3[t2];
    this._liblib0$_position = (this._liblib0$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  }
};

$$._SplayTreeNode = {"": "Object;key>,left*,right*"};

$$._SplayTreeMapNode = {"": "_SplayTreeNode;value*,key,left,right"};

$$._SplayTree = {"": "Object;",
  _splay$1: function(key) {
    var current, left, right, left0, comp, t1, t2, tmp, current0;
    current = this._root;
    if (current == null)
      return -1;
    left = this._dummy;
    for (right = left, left0 = right, comp = null; true;) {
      t1 = $.getInterceptor$x(current);
      comp = this._compare$2(t1.get$key(current), key);
      t2 = $.getInterceptor$n(comp);
      if (t2.$gt(comp, 0)) {
        t2 = t1.get$left(current);
        if (t2 == null)
          break;
        comp = this._compare$2($.get$key$x(t2), key);
        if ($.$gt$n(comp, 0)) {
          tmp = t1.get$left(current);
          t2 = $.getInterceptor$x(tmp);
          t1.set$left(current, t2.get$right(tmp));
          t2.set$right(tmp, current);
          if (t2.get$left(tmp) == null) {
            current = tmp;
            break;
          }
          current = tmp;
        }
        $.set$left$x(right, current);
        current0 = $.get$left$x(current);
        right = current;
        current = current0;
      } else {
        if (t2.$lt(comp, 0)) {
          if (t1.get$right(current) == null)
            break;
          comp = this._compare$2($.get$key$x(t1.get$right(current)), key);
          if ($.$lt$n(comp, 0)) {
            tmp = t1.get$right(current);
            t2 = $.getInterceptor$x(tmp);
            t1.set$right(current, t2.get$left(tmp));
            t2.set$left(tmp, current);
            if (t2.get$right(tmp) == null) {
              current = tmp;
              break;
            }
            current = tmp;
          }
          $.set$right$x(left0, current);
          current0 = $.get$right$x(current);
        } else
          break;
        left0 = current;
        current = current0;
      }
    }
    t1 = $.getInterceptor$x(current);
    $.set$right$x(left0, t1.get$left(current));
    $.set$left$x(right, t1.get$right(current));
    t1.set$left(current, left.right);
    t1.set$right(current, left.left);
    this._root = current;
    left.right = null;
    left.left = null;
    this._splayCount = this._splayCount + 1;
    return comp;
  },
  _addNewRoot$2: function(node, comp) {
    var t1;
    this._count = this._count + 1;
    this._modificationCount = this._modificationCount + 1;
    t1 = this._root;
    if (t1 == null) {
      this._root = node;
      return;
    }
    if ($.$lt$n(comp, 0)) {
      node.left = t1;
      node.right = $.get$right$x(this._root);
      $.set$right$x(this._root, null);
    } else {
      node.right = t1;
      node.left = $.get$left$x(this._root);
      $.set$left$x(this._root, null);
    }
    this._root = node;
  }
};

$$.SplayTreeMap = {"": "_SplayTree;_comparator,_root,_dummy,_count,_modificationCount,_splayCount",
  _comparator$2: function(arg0, arg1) {
    return this._comparator.call$2(arg0, arg1);
  },
  _compare$2: function(key1, key2) {
    return this._comparator$2(key1, key2);
  },
  $index: function(_, key) {
    if (key == null)
      throw $.wrapException($.ArgumentError$(key));
    if (this._root != null)
      if ($.$eq(this._splay$1(key), 0))
        return $.get$value$x(this._root);
    return;
  },
  $indexSet: function(_, key, value) {
    var comp;
    if (key == null)
      throw $.wrapException($.ArgumentError$(key));
    comp = this._splay$1(key);
    if ($.$eq(comp, 0)) {
      $.set$value$x(this._root, value);
      return;
    }
    this._addNewRoot$2($._SplayTreeMapNode$(key, value), comp);
  },
  get$isEmpty: function(_) {
    return this._root == null;
  },
  forEach$1: function(_, f) {
    var nodes, node, t1;
    nodes = $._SplayTreeNodeIterator$(this);
    for (; nodes.moveNext$0();) {
      node = nodes.get$current();
      t1 = $.getInterceptor$x(node);
      f.call$2(t1.get$key(node), t1.get$value(node));
    }
  },
  get$length: function(_) {
    return this._count;
  },
  get$keys: function() {
    return $._SplayTreeKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asSplayTreeMap, 0));
  },
  get$values: function(_) {
    return $._SplayTreeValueIterable$(this, $.getRuntimeTypeArgument(this, this.$asSplayTreeMap, 0), $.getRuntimeTypeArgument(this, this.$asSplayTreeMap, 1));
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  $as_SplayTree: function (K, V) { return [K]; },
  $asMap: null,
  $isMap: true
};

$$._SplayTreeIterator = {"": "Object;",
  get$current: function() {
    var t1 = this._currentNode;
    if (t1 == null)
      return;
    return this._getValue$1(t1);
  },
  _findLeftMostDescendent$1: function(node) {
    var t1;
    for (t1 = this._workList; node != null;) {
      t1.push(node);
      node = $.get$left$x(node);
    }
  },
  _rebuildWorkList$1: function(currentNode) {
    var t1;
    $.JSArray_methods.set$length(this._workList, 0);
    t1 = this._tree;
    if (currentNode == null)
      this._findLeftMostDescendent$1(t1._root);
    else {
      t1._splay$1($.get$key$x(currentNode));
      this._findLeftMostDescendent$1($.get$right$x(t1._root));
    }
  },
  moveNext$0: function() {
    var t1, t2;
    t1 = this._tree;
    if (this._modificationCount !== t1._modificationCount)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    t2 = this._workList;
    if (t2.length === 0) {
      this._currentNode = null;
      return false;
    }
    if (t1._splayCount !== this._splayCount)
      this._rebuildWorkList$1(this._currentNode);
    if (0 >= t2.length)
      throw $.ioore(0);
    this._currentNode = t2.pop();
    this._findLeftMostDescendent$1($.get$right$x(this._currentNode));
    return true;
  },
  _SplayTreeIterator$1: function(tree) {
    this._findLeftMostDescendent$1(tree._root);
  }
};

$$._SplayTreeKeyIterable = {"": "IterableBase;_tree",
  get$length: function(_) {
    return this._tree._count;
  },
  get$isEmpty: function(_) {
    return this._tree._count === 0;
  },
  get$iterator: function(_) {
    return $._SplayTreeKeyIterator$(this._tree);
  },
  $asIterableBase: null,
  $asIterable: null
};

$$._SplayTreeValueIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._count;
  },
  get$isEmpty: function(_) {
    return this._map._count === 0;
  },
  get$iterator: function(_) {
    return $._SplayTreeValueIterator$(this._map);
  },
  $asIterableBase: function (K, V) { return [V]; },
  $asIterable: function (K, V) { return [V]; }
};

$$._SplayTreeKeyIterator = {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return $.get$key$x(node);
  }
};

$$._SplayTreeValueIterator = {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return $.get$value$x(node);
  }
};

$$._SplayTreeNodeIterator = {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return node;
  }
};

$$.DateTime = {"": "Object;millisecondsSinceEpoch<,isUtc",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDateTime)
      return false;
    else
      other;
    return $.$eq(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch) && $.$eq(this.isUtc, other.isUtc);
  },
  compareTo$1: function(_, other) {
    return $.compareTo$1$ns(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, y, m, d, h, min, sec, ms;
    t1 = new $.DateTime_toString_twoDigits();
    y = new $.DateTime_toString_fourDigits().call$1($.Primitives_getYear(this));
    m = t1.call$1($.Primitives_getMonth(this));
    d = t1.call$1($.Primitives_getDay(this));
    h = t1.call$1($.Primitives_getHours(this));
    min = t1.call$1($.Primitives_getMinutes(this));
    sec = t1.call$1($.Primitives_getSeconds(this));
    ms = new $.DateTime_toString_threeDigits().call$1($.Primitives_getMilliseconds(this));
    if (this.isUtc === true)
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
    else
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
  },
  add$1: function(_, duration) {
    return $.DateTime$fromMillisecondsSinceEpoch($.$add$ns(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
  },
  DateTime$_now$0: function() {
    $.Primitives_lazyAsJsDate(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if ($.abs$0$n(millisecondsSinceEpoch) > 8640000000000000)
      throw $.wrapException($.ArgumentError$(millisecondsSinceEpoch));
    if (isUtc == null)
      throw $.wrapException($.ArgumentError$(isUtc));
  },
  $isDateTime: true
};

$$.DateTime_toString_fourDigits = {"": "Closure;",
  call$1: function(n) {
    var t1, absN, sign;
    t1 = $.getInterceptor$n(n);
    absN = t1.abs$0(n);
    sign = t1.$lt(n, 0) ? "-" : "";
    if (absN >= 1000)
      return $.S(n);
    if (absN >= 100)
      return sign + "0" + $.S(absN);
    if (absN >= 10)
      return sign + "00" + $.S(absN);
    return sign + "000" + $.S(absN);
  }
};

$$.DateTime_toString_threeDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100))
      return $.S(n);
    if (t1.$ge(n, 10))
      return "0" + $.S(n);
    return "00" + $.S(n);
  }
};

$$.DateTime_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  }
};

$$.Duration = {"": "Object;_duration<",
  $add: function(_, other) {
    return $.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return $.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    return $.Duration$(0, 0, this._duration * factor, 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  get$inMilliseconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return $.JSNumber_methods.get$hashCode(this._duration);
  },
  compareTo$1: function(_, other) {
    return $.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, t3, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + $.S($.Duration$(0, 0, -t2, 0, 0, 0));
    t3 = $.JSNumber_methods.$tdiv(t2, 60000000);
    twoDigitMinutes = t1.call$1(t3 % 60);
    t3 = $.JSNumber_methods.$tdiv(t2, 1000000);
    twoDigitSeconds = t1.call$1(t3 % 60);
    sixDigitUs = new $.Duration_toString_sixDigits().call$1(t2 % 1000000);
    return $.S($.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
};

$$.Duration_toString_sixDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return $.S(n);
    if (t1.$ge(n, 10000))
      return "0" + $.S(n);
    if (t1.$ge(n, 1000))
      return "00" + $.S(n);
    if (t1.$ge(n, 100))
      return "000" + $.S(n);
    if (t1.$gt(n, 10))
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  }
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  }
};

$$.NullThrownError = {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, actualParameters, i, str, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    for (; t3 = t1.i_1, t4 = $.getInterceptor$n(t3), t4.$lt(t3, t2.length); t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if (t4.$gt(t3, 0)) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        throw $.ioore(t4);
      t4 = $.Error_safeToString(t2[t4]);
      t3._contents = t3._contents + t4;
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new $.NoSuchMethodError_toString_closure(t1));
    t2 = this._existingArgumentNames;
    if (t2 == null)
      return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.Error_safeToString(this._receiver) + "\nArguments: [" + $.S(t1.sb_0) + "]";
    else {
      actualParameters = t1.sb_0._contents;
      t1.sb_0 = $.StringBuffer$("");
      for (i = 0; i < t2.length; ++i) {
        if (i > 0) {
          t3 = t1.sb_0;
          t3._contents = t3._contents + ", ";
        }
        t3 = t1.sb_0;
        if (i >= t2.length)
          throw $.ioore(i);
        str = t2[i];
        str = typeof str === "string" ? str : $.S(str);
        t3._contents = t3._contents + str;
      }
      formalParameters = t1.sb_0._contents;
      t1 = this._memberName;
      return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.Error_safeToString(this._receiver) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
    }
  }
};

$$.UnsupportedError = {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.Error_safeToString(t1) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.Expando = {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + $.S(this.name);
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = $.Object$();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.$add$ns(t1, 1);
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  }
};

$$.Iterator = {"": "Object;"};

$$.Object = {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return "Instance of '" + $.Primitives_objectTypeName(this) + "'";
  }
};

$$.StringBuffer = {"": "Object;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    if (typeof separator !== "string")
      return this.writeAll$2$bailout(1, objects, separator);
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if ($.JSString_methods.get$isEmpty(separator))
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      str = iterator.get$current();
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (; iterator.moveNext$0() === true;) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  writeAll$2$bailout: function(state0, objects, separator) {
    var iterator, str, t1;
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if ($.get$isEmpty$asx(separator) === true)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      str = iterator.get$current();
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (t1 = typeof separator === "string"; iterator.moveNext$0() === true;) {
        str = t1 ? separator : $.S(separator);
        this._contents = this._contents + str;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
};

$$.Interceptor_ListMixin = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin_ImmutableListMixin = {"": "Interceptor_ListMixin+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin0 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Touch]; }, $isIterable: true, $asIterable: function() { return [$.Touch]; }};

$$.Interceptor_ListMixin_ImmutableListMixin0 = {"": "Interceptor_ListMixin0+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Touch]; }, $isIterable: true, $asIterable: function() { return [$.Touch]; }};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  $asStream: null
};

$$._EventStreamSubscription = {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    var t1, t2;
    t1 = this._target;
    if (t1 == null)
      return;
    t2 = this._onData;
    if (t2 != null)
      $.$$dom_removeEventListener$3$x(t1, this._eventType, t2, this._useCapture);
    this._target = null;
    this._onData = null;
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      $.$$dom_addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture) {
    this._tryResume$0();
  }
};

$$.EventStreamProvider = {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture, null);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$._CustomEventStreamProvider = {"": "Object;_eventTypeGetter",
  _eventTypeGetter$1: function(arg0) {
    return this._eventTypeGetter.call$1(arg0);
  },
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventTypeGetter$1(e), useCapture, null);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$.ImmutableListMixin = {"": "Object;",
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
};

$$.Point = {"": "Object;x>,y>",
  toString$0: function(_) {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ")";
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isPoint)
      return false;
    else
      other;
    return $.$eq(this.x, other.x) && $.$eq(this.y, other.y);
  },
  $add: function(_, other) {
    var t1 = $.getInterceptor$x(other);
    return $.Point$($.$add$ns(this.x, t1.get$x(other)), $.$add$ns(this.y, t1.get$y(other)));
  },
  $sub: function(_, other) {
    var t1 = $.getInterceptor$x(other);
    return $.Point$($.$sub$n(this.x, t1.get$x(other)), $.$sub$n(this.y, t1.get$y(other)));
  },
  $mul: function(_, factor) {
    return $.Point$($.$mul$n(this.x, factor), $.$mul$n(this.y, factor));
  },
  round$0: function(_) {
    return $.Point$($.round$0$nx(this.x), $.round$0$nx(this.y));
  },
  $isPoint: true
};

$$.Rect = {"": "Object;left>,top>,width>,height>",
  get$right: function(_) {
    return $.$add$ns(this.left, this.width);
  },
  toString$0: function(_) {
    return "(" + $.S(this.left) + ", " + $.S(this.top) + ", " + $.S(this.width) + ", " + $.S(this.height) + ")";
  },
  $eq: function(_, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = $.getInterceptor$x(other);
    if ($.$eq(this.left, t1.get$left(other))) {
      t2 = this.top;
      t3 = t1.get$top(other);
      t1 = (t2 == null ? t3 == null : t2 === t3) && $.$eq(this.width, t1.get$width(other)) && $.$eq(this.height, t1.get$height(other));
    } else
      t1 = false;
    return t1;
  },
  round$0: function(_) {
    return $.Rect$($.round$0$nx(this.left), $.round$0$nx(this.top), $.round$0$nx(this.width), $.round$0$nx(this.height));
  },
  $isRect: true,
  $asRect: null
};

$$.FixedSizeListIterator = {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (nextPosition < t1) {
      this._current = $.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1) {
    var nextPosition = $.$add$ns(t1, 1);
    t1 = this._length;
    if ($.$lt$n(nextPosition, t1)) {
      this._current = $.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._current;
  }
};

$$.convertDartToNative_Dictionary_closure = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  }
};

$$.ReceivePort = {"": "Object;"};

$$.GameLoop = {"": "Object;",
  processTimers$0: function() {
    var t1, _timersLength, t2, i, lastElement;
    t1 = this._timers;
    _timersLength = t1.length;
    for (t2 = this.updateTimeStep, i = 0; i < _timersLength; ++i)
      t1[i]._update$1(t2);
    for (i = _timersLength - 1; i >= 0; --i) {
      t2 = t1.length;
      lastElement = t2 - 1;
      if (i >= t2)
        throw $.ioore(i);
      if (t1[i].get$_isDead() === true) {
        if (i !== lastElement) {
          if (lastElement < 0)
            throw $.ioore(lastElement);
          t1[i] = t1[lastElement];
        }
        if (0 >= t2)
          throw $.ioore(0);
        t1.pop();
      }
    }
  },
  onUpdate$1: function(arg0) {
    return this.onUpdate.call$1(arg0);
  }
};

$$.DigitalButton = {"": "Object;buttonId,framePressed?,frameReleased?,timePressed?,timeReleased?",
  get$down: function() {
    return this.framePressed > this.frameReleased;
  }
};

$$.DigitalButtonEvent = {"": "Object;down<,frame,buttonId,time",
  toString$0: function(_) {
    return "Button: " + $.S(this.buttonId) + " DOWN: " + this.down + " [" + $.S(this.frame) + "@" + $.S(this.time) + "]";
  }
};

$$.DigitalInput = {"": "Object;gameLoop<",
  digitalButtonEvent$1: function($event) {
    var t1, button;
    t1 = this.buttons;
    button = t1.$index(t1, $event.buttonId);
    if (button == null)
      return;
    if ($event.down) {
      if (!button.get$down()) {
        button.set$framePressed($event.frame);
        button.set$timePressed($event.time);
      }
    } else {
      button.set$frameReleased($event.frame);
      button.set$timeReleased($event.time);
    }
  },
  DigitalInput$2: function(gameLoop, buttonIds) {
    var t1, t2, buttonId;
    for (t1 = $.JSArray_methods.get$iterator(buttonIds), t2 = this.buttons; t1.moveNext$0();) {
      buttonId = t1.get$current();
      t2.$indexSet(t2, buttonId, $.DigitalButton$(buttonId));
    }
  }
};

$$.GameLoopTimer = {"": "Object;gameLoop<"};

$$.GameLoopGamepad = {"": "Object;gameLoop<,buttons,sticks"};

$$.GameLoopHtml = {"": "GameLoop;element,_frameCounter,_initialized,_interrupt,_previousFrameTime,_frameTime,_resizePending,_nextResize,handleKeyboardEvents,handleGamepadEvents,handleMouseEvents,maxAccumulatedTime,_accumulatedTime,_gameTime,_renderInterpolationFactor,resizeLimit,_pointerLock,_keyboard,_mouse,_gamepad0,_touchSet,_rafId,_touchEvents,_keyboardEvents,_mouseEvents,onRender,onResize,onFullscreenChange,onPointerLockChange,onTouchStart,onTouchEnd,updateTimeStep,lib3$GameLoop$maxAccumulatedTime,_timers,onUpdate",
  _processInputEvents$0: function() {
    var t1, t2, keyboardEvent, t3, down, time, $event, t4, t5, canvasX, canvasY, t6, mouseEvent, t7, moveEvent, wheelEvent, mouseX, mouseY, t8, x, t9, y, clampX, withinCanvas, clampY, touchEvent;
    if (this.handleKeyboardEvents) {
      for (t1 = this._keyboardEvents, t2 = $.JSArray_methods.get$iterator(t1); t2.moveNext$0();) {
        keyboardEvent = t2.get$current();
        t3 = $.getInterceptor$x(keyboardEvent);
        down = $.$eq(t3.get$type(keyboardEvent), "keydown");
        time = $.$div$n(t3.get$timeStamp(keyboardEvent), 1000);
        $event = $.DigitalButtonEvent$(t3.get$keyCode(keyboardEvent), down, this._frameCounter, time);
        this._keyboard.digitalButtonEvent$1($event);
      }
      $.JSArray_methods.set$length(t1, 0);
    }
    if (this.handleMouseEvents) {
      t1 = this._mouse;
      t1._resetAccumulators$0;
      t1._wheelDx = 0;
      t1._wheelDy = 0;
      t1._dx = 0;
      t1._dy = 0;
      t1 = this.element;
      t1.get$offset;
      t2 = t1.offsetLeft;
      t3 = t1.offsetTop;
      t4 = t1.offsetWidth;
      t5 = t1.offsetHeight;
      canvasX = $.Rect$(t2, t3, t4, t5).left;
      canvasY = $.Rect$(t2, t3, t4, t5).top;
      for (t2 = this._mouseEvents, t3 = $.JSArray_methods.get$iterator(t2), t4 = $.getInterceptor$x(t1), t5 = $.getInterceptor$ns(canvasX), t6 = $.getInterceptor$ns(canvasY); t3.moveNext$0();) {
        mouseEvent = t3.get$current();
        t7 = $.getInterceptor$x(mouseEvent);
        moveEvent = $.$eq(t7.get$type(mouseEvent), "mousemove");
        wheelEvent = $.$eq(t7.get$type(mouseEvent), "mousewheel");
        down = $.$eq(t7.get$type(mouseEvent), "mousedown");
        time = $.$div$n(t7.get$timeStamp(mouseEvent), 1000);
        if (moveEvent) {
          mouseX = t7.get$page(mouseEvent).x;
          mouseY = t7.get$page(mouseEvent).y;
          t8 = $.getInterceptor$n(mouseX);
          x = t8.$sub(mouseX, canvasX);
          t9 = $.getInterceptor$n(mouseY);
          y = t9.$sub(mouseY, canvasY);
          if (t8.$lt(mouseX, canvasX)) {
            clampX = 0;
            withinCanvas = false;
          } else if (t8.$gt(mouseX, t5.$add(canvasX, t4.get$client(t1).width))) {
            clampX = t4.get$client(t1).width;
            withinCanvas = false;
          } else {
            clampX = x;
            withinCanvas = true;
          }
          if (t9.$lt(mouseY, canvasY)) {
            clampY = 0;
            withinCanvas = false;
          } else if (t9.$gt(mouseY, t6.$add(canvasY, t4.get$client(t1).height))) {
            clampY = t4.get$client(t1).height;
            withinCanvas = false;
          } else
            clampY = y;
          $event = $.GameLoopMouseEvent$(x, y, $.get$x$x(t7.get$client(mouseEvent)), $.get$y$x(t7.get$client(mouseEvent)), clampX, clampY, withinCanvas, time, this._frameCounter);
          this._mouse.gameLoopMouseEvent$1($event);
        } else {
          t8 = this._mouse;
          if (wheelEvent) {
            $.interceptedTypeCast(mouseEvent, "$isWheelEvent");
            t7 = $.getInterceptor$x(mouseEvent);
            t9 = t7.get$deltaX(mouseEvent);
            t7 = t7.get$deltaY(mouseEvent);
            t8._accumulateWheel$2;
            t8._wheelDx = t8._wheelDx + t9;
            t8._wheelDy = t8._wheelDy + t7;
          } else
            t8.digitalButtonEvent$1($.DigitalButtonEvent$(t7.get$button(mouseEvent), down, this._frameCounter, time));
        }
      }
      $.JSArray_methods.set$length(t2, 0);
    }
    if (this.handleGamepadEvents) {
      for (t1 = this._touchEvents, t2 = $.JSArray_methods.get$iterator(t1); t2.moveNext$0();) {
        touchEvent = t2.get$current();
        t3 = $.getInterceptor$x(touchEvent);
        switch (t3.get$type(touchEvent)) {
          case 3:
            this._touchSet._liblib2$_start$1(t3.get$event(touchEvent));
            break;
          case 2:
            this._touchSet._end$1(t3.get$event(touchEvent));
            break;
          case 1:
            this._touchSet._move$1(t3.get$event(touchEvent));
            break;
          default:
            throw $.wrapException($.StateError$("Invalid _GameLoopTouchEven type."));
        }
      }
      $.JSArray_methods.set$length(t1, 0);
    }
  },
  _requestAnimationFrame$1: function(_, _0) {
    var t1, t2;
    if (this._previousFrameTime == null) {
      this._frameTime = $.GameLoop_timeStampToSeconds($.DateTime_DateTime$now().get$millisecondsSinceEpoch());
      this._previousFrameTime = this._frameTime;
      this._processInputEvents$0();
      this._rafId = $.Window_methods.requestAnimationFrame$1(window, this.get$_requestAnimationFrame(this));
      return;
    }
    if (this._interrupt) {
      this._rafId = null;
      return;
    }
    this._rafId = $.Window_methods.requestAnimationFrame$1(window, this.get$_requestAnimationFrame(this));
    this._frameCounter = this._frameCounter + 1;
    this._previousFrameTime = this._frameTime;
    this._frameTime = $.GameLoop_timeStampToSeconds($.DateTime_DateTime$now().get$millisecondsSinceEpoch());
    t1 = this._frameTime;
    t2 = this._previousFrameTime;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    this._accumulatedTime = this._accumulatedTime + (t1 - t2);
    t1 = this.maxAccumulatedTime;
    if (this._accumulatedTime > t1)
      this._accumulatedTime = t1;
    this._processInputEvents$0();
    for (t1 = this.updateTimeStep; this._accumulatedTime >= t1;) {
      this.processTimers$0();
      this._gameTime = this._gameTime + t1;
      if (this.onUpdate != null)
        this.onUpdate$1(this);
      this._accumulatedTime = this._accumulatedTime - t1;
    }
    if (this._resizePending && this.onResize != null && this._nextResize <= this._frameTime) {
      this.onResize$1(this, this);
      this._nextResize = this._frameTime + this.resizeLimit;
      this._resizePending = false;
    }
    if (this.onRender != null) {
      this._renderInterpolationFactor = this._accumulatedTime / t1;
      this.onRender$1(this);
    }
  },
  get$_requestAnimationFrame: function(receiver) {
    return new $.BoundClosure$i1(this, "_requestAnimationFrame$1", receiver);
  },
  _fullscreenChange$1: function(_) {
    if (this.onFullscreenChange == null)
      return;
    this.onFullscreenChange$1(this, this);
  },
  get$_fullscreenChange: function() {
    return new $.BoundClosure$1(this, "_fullscreenChange$1");
  },
  _fullscreenError$1: function(_) {
    if (this.onFullscreenChange == null)
      return;
    this.onFullscreenChange$1(this, this);
  },
  get$_fullscreenError: function() {
    return new $.BoundClosure$1(this, "_fullscreenError$1");
  },
  _touchStartEvent$1: function($event) {
    this._touchEvents.push($._GameLoopTouchEvent$($event, 3));
  },
  get$_touchStartEvent: function() {
    return new $.BoundClosure$1(this, "_touchStartEvent$1");
  },
  _touchMoveEvent$1: function($event) {
    this._touchEvents.push($._GameLoopTouchEvent$($event, 1));
  },
  get$_touchMoveEvent: function() {
    return new $.BoundClosure$1(this, "_touchMoveEvent$1");
  },
  _touchEndEvent$1: function($event) {
    this._touchEvents.push($._GameLoopTouchEvent$($event, 2));
  },
  get$_touchEndEvent: function() {
    return new $.BoundClosure$1(this, "_touchEndEvent$1");
  },
  _keyDown$1: function($event) {
    this._keyboardEvents.push($event);
  },
  get$_keyDown: function() {
    return new $.BoundClosure$1(this, "_keyDown$1");
  },
  _keyUp$1: function($event) {
    this._keyboardEvents.push($event);
  },
  get$_keyUp: function() {
    return new $.BoundClosure$1(this, "_keyUp$1");
  },
  _mouseDown$1: function($event) {
    this._mouseEvents.push($event);
  },
  get$_mouseDown: function() {
    return new $.BoundClosure$1(this, "_mouseDown$1");
  },
  _mouseUp$1: function($event) {
    this._mouseEvents.push($event);
  },
  get$_mouseUp: function() {
    return new $.BoundClosure$1(this, "_mouseUp$1");
  },
  _mouseMove$1: function($event) {
    this._mouseEvents.push($event);
  },
  get$_mouseMove: function() {
    return new $.BoundClosure$1(this, "_mouseMove$1");
  },
  _mouseWheel$1: function($event) {
    this._mouseEvents.push($event);
    $.preventDefault$0$x($event);
  },
  get$_mouseWheel: function() {
    return new $.BoundClosure$1(this, "_mouseWheel$1");
  },
  _resize$1: function(_) {
    if (!this._resizePending)
      this._resizePending = true;
  },
  get$_resize: function() {
    return new $.BoundClosure$1(this, "_resize$1");
  },
  start$0: function(_) {
    var t1;
    if (!this._initialized) {
      t1 = $.HtmlDocument_methods.get$onFullscreenError(document);
      $._EventStreamSubscription$(t1._target, t1._eventType, this.get$_fullscreenError(), t1._useCapture);
      t1 = $.HtmlDocument_methods.get$onFullscreenChange(document);
      $._EventStreamSubscription$(t1._target, t1._eventType, this.get$_fullscreenChange(), t1._useCapture);
      t1 = $.Window_methods.get$onTouchStart(window);
      $._EventStreamSubscription$(t1._target, t1._eventType, this.get$_touchStartEvent(), t1._useCapture);
      t1 = $.Window_methods.get$onTouchEnd(window);
      $._EventStreamSubscription$(t1._target, t1._eventType, this.get$_touchEndEvent(), t1._useCapture);
      t1 = $.Window_methods.get$onTouchMove(window);
      $._EventStreamSubscription$(t1._target, t1._eventType, this.get$_touchMoveEvent(), t1._useCapture);
      t1 = $.Window_methods.get$onKeyDown(window);
      $._EventStreamSubscription$(t1._target, t1._eventType, this.get$_keyDown(), t1._useCapture);
      t1 = $.Window_methods.get$onKeyUp(window);
      $._EventStreamSubscription$(t1._target, t1._eventType, this.get$_keyUp(), t1._useCapture);
      t1 = $.Window_methods.get$onResize(window);
      $._EventStreamSubscription$(t1._target, t1._eventType, this.get$_resize(), t1._useCapture);
      t1 = $.Window_methods.get$onMouseMove(window);
      $._EventStreamSubscription$(t1._target, t1._eventType, this.get$_mouseMove(), t1._useCapture);
      t1 = $.Window_methods.get$onMouseDown(window);
      $._EventStreamSubscription$(t1._target, t1._eventType, this.get$_mouseDown(), t1._useCapture);
      t1 = $.Window_methods.get$onMouseUp(window);
      $._EventStreamSubscription$(t1._target, t1._eventType, this.get$_mouseUp(), t1._useCapture);
      t1 = $.Window_methods.get$onMouseWheel(window);
      $._EventStreamSubscription$(t1._target, t1._eventType, this.get$_mouseWheel(), t1._useCapture);
      this._initialized = true;
    }
    this._interrupt = false;
    this._rafId = $.Window_methods.requestAnimationFrame$1(window, this.get$_requestAnimationFrame(this));
  },
  onRender$1: function(arg0) {
    return this.onRender.call$1(arg0);
  },
  onResize$1: function($receiver, arg0) {
    return this.onResize.call$1(arg0);
  },
  onFullscreenChange$1: function($receiver, arg0) {
    return this.onFullscreenChange.call$1(arg0);
  },
  onPointerLockChange$1: function($receiver, arg0) {
    return this.onPointerLockChange.call$1(arg0);
  },
  onTouchStart$2: function($receiver, arg0, arg1) {
    return this.onTouchStart.call$2(arg0, arg1);
  },
  onTouchEnd$2: function($receiver, arg0, arg1) {
    return this.onTouchEnd.call$2(arg0, arg1);
  },
  GameLoopHtml$1: function(element) {
    this._keyboard = $.Keyboard$(this);
    this._mouse = $.Mouse$(this);
    this._gamepad0 = $.GameLoopGamepad$(this);
    this._pointerLock = $.PointerLock$(this);
    this._touchSet = $.GameLoopTouchSet$(this);
  }
};

$$.Keyboard = {"": "DigitalInput;gameLoop,buttons"};

$$.GameLoopMouseEvent = {"": "Object;x>,y>,dx,dy,clampX,clampY,time,withinCanvas,frame"};

$$.Mouse = {"": "DigitalInput;_dx,_dy,_x,_y,_clampX,_clampY,_wheelDx,_wheelDy,_withinCanvas,_time,_frame,gameLoop,buttons",
  get$x: function(_) {
    return this._x;
  },
  get$y: function(_) {
    return this._y;
  },
  gameLoopMouseEvent$1: function($event) {
    var t1, t2;
    this._x = $event.x;
    this._y = $event.y;
    this._time = $event.time;
    this._frame = $event.frame;
    t1 = this._dx;
    t2 = $event.dx;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    this._dx = t1 + t2;
    t2 = this._dy;
    t1 = $event.dy;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this._dy = t2 + t1;
    this._clampX = $event.clampX;
    this._clampY = $event.clampY;
    this._withinCanvas = $event.withinCanvas;
  }
};

$$.PointerLock = {"": "Object;gameLoop<,lockOnClick",
  _onClick$1: function($event) {
    if (this.lockOnClick)
      this.gameLoop.element.webkitRequestPointerLock();
  },
  get$_onClick: function() {
    return new $.BoundClosure$1(this, "_onClick$1");
  },
  _onPointerLockChange$1: function($event) {
    var t1 = this.gameLoop;
    if (t1.onPointerLockChange != null)
      t1.onPointerLockChange$1(t1, t1);
  },
  get$_onPointerLockChange: function() {
    return new $.BoundClosure$1(this, "_onPointerLockChange$1");
  },
  PointerLock$1: function(gameLoop) {
    $.get$onClick$x(this.gameLoop.element).listen$1(this.get$_onClick());
    $.HtmlDocument_methods.get$onPointerLockChange($.document()).listen$1(this.get$_onPointerLockChange());
  }
};

$$._GameLoopTouchEvent = {"": "Object;event>,type>"};

$$.GameLoopTouchPosition = {"": "Object;x>,y>,dx,dy,time,frame"};

$$.GameLoopTouch = {"": "Object;id>,positions<"};

$$.GameLoopTouchSet = {"": "Object;activeTouches<,gameLoop<",
  _liblib2$_start$1: function($event) {
    $.forEach$1$ax($.get$changedTouches$x($event), new $.GameLoopTouchSet__start_closure(this));
  },
  _end$1: function($event) {
    $.forEach$1$ax($.get$changedTouches$x($event), new $.GameLoopTouchSet__end_closure(this));
  },
  _move$1: function($event) {
    $.forEach$1$ax($.get$changedTouches$x($event), new $.GameLoopTouchSet__move_closure(this));
  }
};

$$.GameLoopTouchSet__start_closure = {"": "Closure;this_0",
  call$1: function(touch) {
    var t1, t2, glTouch, t3, t4;
    t1 = $.getInterceptor$x(touch);
    t2 = t1.get$identifier(touch);
    glTouch = $.GameLoopTouch$(t2);
    t3 = this.this_0;
    t4 = t3.get$activeTouches();
    t4.$indexSet(t4, t2, glTouch);
    t2 = $.get$x$x(t1.get$client(touch));
    t1 = $.get$y$x(t1.get$client(touch));
    t4 = t3.get$gameLoop();
    glTouch.positions.push($.GameLoopTouchPosition$(t2, t1, 0, 0, t4._gameTime, t4._frameCounter));
    t1 = t3.get$gameLoop();
    if (t1.onTouchStart != null)
      t1.onTouchStart$2(t1, t1, glTouch);
  }
};

$$.GameLoopTouchSet__end_closure = {"": "Closure;this_0",
  call$1: function(touch) {
    var t1, t2, t3, glTouch, t4, position;
    t1 = this.this_0;
    t2 = t1.get$activeTouches();
    t3 = $.getInterceptor$x(touch);
    glTouch = t2.$index(t2, t3.get$identifier(touch));
    t2 = t1.get$activeTouches();
    t2.remove$1(t2, t3.get$identifier(touch));
    t2 = $.get$x$x(t3.get$client(touch));
    t3 = $.get$y$x(t3.get$client(touch));
    t4 = t1.get$gameLoop();
    position = $.GameLoopTouchPosition$(t2, t3, 0, 0, t4._gameTime, t4._frameCounter);
    glTouch.get$positions().push(position);
    t1 = t1.get$gameLoop();
    if (t1.onTouchEnd != null)
      t1.onTouchEnd$2(t1, t1, glTouch);
  }
};

$$.GameLoopTouchSet__move_closure = {"": "Closure;this_0",
  call$1: function(touch) {
    var t1, t2, t3, glTouch, position;
    t1 = this.this_0;
    t2 = t1.get$activeTouches();
    t3 = $.getInterceptor$x(touch);
    glTouch = t2.$index(t2, t3.get$identifier(touch));
    t2 = $.get$x$x(t3.get$client(touch));
    t3 = $.get$y$x(t3.get$client(touch));
    t1 = t1.get$gameLoop();
    position = $.GameLoopTouchPosition$(t2, t3, 0, 0, t1._gameTime, t1._frameCounter);
    glTouch.get$positions().push(position);
  }
};

$$.ListMixinWorkaround_Observable = {"": "ListMixinWorkaround+Observable;$$_observers<,$$_changes@,hashCode>"};

$$.ObservableList = {"": "ListMixinWorkaround_Observable;_list,$$_observers,$$_changes,hashCode",
  get$length: function(_) {
    if ($.observeReads())
      $.notifyRead(this, 1, "length");
    return this._list.length;
  },
  set$length: function(_, value) {
    var t1, len, i;
    if (typeof value !== "number")
      return this.set$length$bailout(1, value);
    t1 = this._list;
    len = t1.length;
    if (len === value)
      return;
    if ($.hasObservers(this))
      if (value < len) {
        for (i = len - 1; i >= value; --i) {
          if (i < 0 || i >= t1.length)
            throw $.ioore(i);
          $.notifyChange(this, 10, i, t1[i], null);
        }
        $.notifyChange(this, 1, "length", len, value);
      } else {
        $.notifyChange(this, 1, "length", len, value);
        for (i = len; i < value; ++i)
          $.notifyChange(this, 6, i, null, null);
      }
    $.JSArray_methods.set$length(t1, value);
  },
  set$length$bailout: function(state0, value) {
    var t1, len, i;
    t1 = this._list;
    len = t1.length;
    if (len === value)
      return;
    if ($.hasObservers(this))
      if ($.$lt$n(value, len)) {
        for (i = len - 1; $.JSNumber_methods.$ge(i, value); --i) {
          if (i < 0 || i >= t1.length)
            throw $.ioore(i);
          $.notifyChange(this, 10, i, t1[i], null);
        }
        $.notifyChange(this, 1, "length", len, value);
      } else {
        $.notifyChange(this, 1, "length", len, value);
        for (i = len; $.JSNumber_methods.$lt(i, value); ++i)
          $.notifyChange(this, 6, i, null, null);
      }
    $.JSArray_methods.set$length(t1, value);
  },
  $index: function(_, index) {
    var t1 = $._activeObserver;
    if (t1 != null)
      t1._addRead$3(this, 2, index);
    t1 = this._list;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1, oldValue, t2;
    t1 = this._list;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    oldValue = t1[index];
    t2 = this.get$$$_observers();
    if (t2 != null && $.get$head$x(t2) != null)
      $.notifyChange(this, 2, index, oldValue, value);
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  sublist$2: function(_, start, end) {
    var t1, $arguments, arguments0, t2;
    t1 = $.ListMixin.prototype.sublist$2.call(this, this, start, end);
    $arguments = this.$asObservableList;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    if ($arguments == null)
      ;
    $arguments = this.$asObservableList;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t2 = $arguments == null ? null : $arguments[0];
    t2 = $.ObservableList$(null, t2);
    t2.addAll$1(t2, t1);
    return t2;
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  add$1: function(_, value) {
    var t1, len, t2;
    t1 = this._list;
    len = t1.length;
    t2 = this.get$$$_observers();
    if (t2 != null && $.get$head$x(t2) != null) {
      $.notifyChange(this, 1, "length", len, len + 1);
      $.notifyChange(this, 6, len, null, value);
    }
    $.JSArray_methods.add$1(t1, value);
  },
  toString$0: function(_) {
    var t1, t2, i, result;
    t1 = $._activeObserver;
    if (t1 != null) {
      t2 = this._list.length;
      i = 0;
      while (true) {
        if ($.observeReads())
          $.notifyRead(this, 1, "length");
        if (!(i < t2))
          break;
        t1._addRead$3(this, 2, i);
        ++i;
      }
    }
    result = $.StringBuffer$("");
    $.ToString__emitValue(this._list, result, $.List_List($, null));
    return result._contents;
  },
  $asListMixinWorkaround_Observable: null,
  $asList: function (E) { return [null]; },
  $asIterable: function (E) { return [null]; },
  $isList: true,
  $isIterable: true
};

$$.ChangeRecord = {"": "Object;type>,key>,oldValue,newValue",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isChangeRecord) {
      other;
      t1 = this.type === other.type && $.$eq(this.key, other.key) && $.$eq(this.oldValue, other.oldValue) && $.$eq(this.newValue, other.newValue);
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return $.hash4(this.type, this.key, this.oldValue, this.newValue);
  },
  toString$0: function(_) {
    var typeStr = null;
    switch (this.type) {
      case 1:
        typeStr = "field";
        break;
      case 2:
        typeStr = "index";
        break;
      case 6:
        typeStr = "insert";
        break;
      case 10:
        typeStr = "remove";
        break;
    }
    return "#<ChangeRecord " + $.S(typeStr) + " " + $.S(this.key) + " from " + $.S(this.oldValue) + " to " + $.S(this.newValue) + ">";
  },
  $isChangeRecord: true
};

$$.toObservable_closure = {"": "Closure;",
  call$0: function() {
    return $.SplayTreeMap$(null, null, null);
  }
};

$$.toObservable_closure0 = {"": "Closure;",
  call$0: function() {
    return $.LinkedHashMap$(null, null);
  }
};

$$.Observable = {"": "Object;$$_observers<,$$_changes@,hashCode>"};

$$.deliverChangesSync_closure = {"": "Closure;",
  call$2: function(id, obs) {
    obs._deliver$0();
  }
};

$$.closure = {"": "Closure;",
  call$1: function(message) {
    $.Primitives_printString($.toString$0(message));
    return;
  }
};

$$.setImmediate_closure = {"": "Closure;callback_0,port_1",
  call$2: function(msg, sendPort) {
    var t1 = this.port_1;
    t1._callback = null;
    $globalState.currentContext.unregister$1(t1._id);
    this.callback_0.call$0();
  }
};

$$.ListMixinWorkaround = {"": "ListMixin;", $asList: function() { return [null]; }, $asIterable: function() { return [null]; }};

// Native classes
$$._HTMLElement = {"": "Element;"};

$$.AnchorElement = {"": "Element;type=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.AnimationEvent = {"": "Event;"};

$$.AreaElement = {"": "Element;"};

$$.Attr = {"": "Node;"};

$$.AudioElement = {"": "MediaElement;"};

$$.AutocompleteErrorEvent = {"": "Event;"};

$$.BRElement = {"": "Element;"};

$$.BaseElement = {"": "Element;"};

$$.BeforeLoadEvent = {"": "Event;"};

$$.BodyElement = {"": "Element;"};

$$.ButtonElement = {"": "Element;type=,value%"};

$$.CDataSection = {"": "Text;"};

$$.CanvasElement = {"": "Element;height%,width%",
  get$context2D: function(receiver) {
    return receiver.getContext("2d");
  }
};

$$.CanvasGradient = {"": "Interceptor;"};

$$.CanvasPattern = {"": "Interceptor;"};

$$.CanvasRenderingContext = {"": "Interceptor;"};

$$.CanvasRenderingContext2D = {"": "CanvasRenderingContext;"};

$$.CharacterData = {"": "Node;length="};

$$.CloseEvent = {"": "Event;"};

$$.Comment = {"": "CharacterData;"};

$$.CompositionEvent = {"": "UIEvent;"};

$$.ContentElement = {"": "Element;"};

$$.CssFontFaceLoadEvent = {"": "Event;"};

$$.CustomElementConstructor = {"": "Interceptor;"};

$$.CustomEvent = {"": "Event;"};

$$.DListElement = {"": "Element;"};

$$.DataListElement = {"": "Element;"};

$$.DetailsElement = {"": "Element;"};

$$.DeviceMotionEvent = {"": "Event;"};

$$.DeviceOrientationEvent = {"": "Event;alpha="};

$$.DialogElement = {"": "Element;"};

$$.DivElement = {"": "Element;"};

$$.Document = {"": "Node;",
  register$2: function(receiver, $name, options) {
    var t1 = $ === options;
    if (t1)
      options = null;
    if (!t1)
      return receiver.webkitRegister($name, $.convertDartToNative_Dictionary(options));
    return receiver.webkitRegister($name);
  },
  get$onFullscreenChange: function(receiver) {
    return $.EventStreamProvider_webkitfullscreenchange.forTarget$1(receiver);
  },
  get$onFullscreenError: function(receiver) {
    return $.EventStreamProvider_webkitfullscreenerror.forTarget$1(receiver);
  },
  get$onPointerLockChange: function(receiver) {
    return $.EventStreamProvider_webkitpointerlockchange.forTarget$1(receiver);
  }
};

$$.DocumentFragment = {"": "Node;"};

$$.DocumentType = {"": "Node;"};

$$.DomError = {"": "Interceptor;"};

$$.DomException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {"": "Node;id=",
  get$client: function(receiver) {
    return $.Rect$(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight);
  },
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  }
};

$$.EmbedElement = {"": "Element;height%,type=,width%"};

$$.ErrorEvent = {"": "Event;"};

$$.Event = {"": "Interceptor;timeStamp=,type=",
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  }
};

$$.EventException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventTarget = {"": "Interceptor;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.FieldSetElement = {"": "Element;type="};

$$.FileError = {"": "Interceptor;"};

$$.FileException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.FocusEvent = {"": "UIEvent;"};

$$.FormElement = {"": "Element;length="};

$$.HRElement = {"": "Element;"};

$$.HashChangeEvent = {"": "Event;"};

$$.HeadElement = {"": "Element;"};

$$.HeadingElement = {"": "Element;"};

$$.HtmlCollection = {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlDocument = {"": "Document;",
  get$head: function(receiver) {
    return receiver.head;
  }
};

$$.HtmlElement = {"": "Element;"};

$$.HtmlFormControlsCollection = {"": "HtmlCollection;"};

$$.HtmlOptionsCollection = {"": "HtmlCollection;"};

$$.HttpRequestException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.HttpRequestProgressEvent = {"": "ProgressEvent;"};

$$.IFrameElement = {"": "Element;height%,width%"};

$$.ImageElement = {"": "Element;height%,width%,x=,y="};

$$.InputElement = {"": "Element;height%,type=,value%,width%"};

$$.KeyboardEvent = {"": "UIEvent;",
  get$keyCode: function(receiver) {
    return receiver.keyCode;
  }
};

$$.KeygenElement = {"": "Element;type="};

$$.LIElement = {"": "Element;type=,value%"};

$$.LabelElement = {"": "Element;"};

$$.LegendElement = {"": "Element;"};

$$.LinkElement = {"": "Element;type="};

$$.MapElement = {"": "Element;"};

$$.MediaElement = {"": "Element;"};

$$.MediaError = {"": "Interceptor;"};

$$.MediaKeyError = {"": "Interceptor;"};

$$.MediaKeyEvent = {"": "Event;"};

$$.MediaStreamEvent = {"": "Event;"};

$$.MediaStreamTrackEvent = {"": "Event;"};

$$.MenuElement = {"": "Element;"};

$$.MessageEvent = {"": "Event;"};

$$.MetaElement = {"": "Element;"};

$$.MeterElement = {"": "Element;value%"};

$$.MidiConnectionEvent = {"": "Event;"};

$$.MidiMessageEvent = {"": "Event;"};

$$.ModElement = {"": "Element;"};

$$.MouseEvent = {"": "UIEvent;button=",
  get$client: function(receiver) {
    return $.Point$(receiver.clientX, receiver.clientY);
  }
};

$$.MutationEvent = {"": "Event;"};

$$.Navigator = {"": "Interceptor;"};

$$.NavigatorUserMediaError = {"": "Interceptor;"};

$$.Node = {"": "EventTarget;",
  toString$0: function(receiver) {
    var t1 = receiver.localName;
    if (t1 == null) {
      t1 = receiver.nodeValue;
      if (t1 == null)
        t1 = $.Interceptor.prototype.toString$0.call(this, receiver);
    }
    return t1;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.Notation = {"": "Node;"};

$$.OListElement = {"": "Element;type="};

$$.ObjectElement = {"": "Element;height%,type=,width%"};

$$.OptGroupElement = {"": "Element;"};

$$.OptionElement = {"": "Element;value%"};

$$.OutputElement = {"": "Element;type=,value%"};

$$.OverflowEvent = {"": "Event;"};

$$.PageTransitionEvent = {"": "Event;"};

$$.ParagraphElement = {"": "Element;"};

$$.ParamElement = {"": "Element;value%"};

$$.PopStateEvent = {"": "Event;"};

$$.PositionError = {"": "Interceptor;"};

$$.PreElement = {"": "Element;"};

$$.ProcessingInstruction = {"": "Node;"};

$$.ProgressElement = {"": "Element;value%"};

$$.ProgressEvent = {"": "Event;"};

$$.QuoteElement = {"": "Element;"};

$$.RangeException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.RtcDataChannelEvent = {"": "Event;"};

$$.RtcDtmfToneChangeEvent = {"": "Event;"};

$$.RtcIceCandidateEvent = {"": "Event;"};

$$.ScriptElement = {"": "Element;event=,type="};

$$.SecurityPolicyViolationEvent = {"": "Event;"};

$$.SelectElement = {"": "Element;length=,type=,value%"};

$$.ShadowElement = {"": "Element;"};

$$.ShadowRoot = {"": "DocumentFragment;"};

$$.SourceElement = {"": "Element;type="};

$$.SpanElement = {"": "Element;"};

$$.SpeechInputEvent = {"": "Event;"};

$$.SpeechRecognitionError = {"": "Event;"};

$$.SpeechRecognitionEvent = {"": "Event;"};

$$.SpeechSynthesisEvent = {"": "Event;"};

$$.StorageEvent = {"": "Event;key="};

$$.StyleElement = {"": "Element;type="};

$$.TableCaptionElement = {"": "Element;"};

$$.TableCellElement = {"": "Element;"};

$$.TableColElement = {"": "Element;"};

$$.TableElement = {"": "Element;"};

$$.TableRowElement = {"": "Element;"};

$$.TableSectionElement = {"": "Element;"};

$$.TemplateElement = {"": "Element;"};

$$.Text = {"": "CharacterData;"};

$$.TextAreaElement = {"": "Element;type=,value%"};

$$.TextEvent = {"": "UIEvent;"};

$$.TitleElement = {"": "Element;"};

$$.Touch = {"": "Interceptor;identifier=",
  get$client: function(receiver) {
    return $.Point$(receiver.clientX, receiver.clientY);
  },
  get$page: function(receiver) {
    return $.Point$(receiver.pageX, receiver.pageY);
  }
};

$$.TouchEvent = {"": "UIEvent;changedTouches="};

$$.TouchList = {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw $.wrapException($.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Touch]; },
  $isIterable: true,
  $asIterable: function() { return [$.Touch]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.TrackElement = {"": "Element;"};

$$.TrackEvent = {"": "Event;"};

$$.TransitionEvent = {"": "Event;"};

$$.UIEvent = {"": "Event;",
  get$page: function(receiver) {
    return $.Point$(receiver.pageX, receiver.pageY);
  }
};

$$.UListElement = {"": "Element;"};

$$.UnknownElement = {"": "Element;"};

$$.VideoElement = {"": "MediaElement;height%,width%"};

$$.WheelEvent = {"": "MouseEvent;",
  get$deltaY: function(receiver) {
    var detail;
    if (receiver.deltaY !== undefined)
      return this.get$_deltaY(receiver);
    else if (receiver.wheelDelta !== undefined)
      return -this.get$_wheelDelta(receiver);
    else if (receiver.detail !== undefined) {
      if (receiver.axis == MouseScrollEvent.VERTICAL_AXIS) {
        detail = this.get$_detail(receiver);
        if ($.JSNumber_methods.abs$0(detail) < 100)
          return -detail * 40;
        return -detail;
      }
      return 0;
    }
    throw $.wrapException($.UnsupportedError$("deltaY is not supported"));
  },
  get$deltaX: function(receiver) {
    var detail;
    if (receiver.deltaX !== undefined)
      return this.get$_deltaX(receiver);
    else if (receiver.wheelDeltaX !== undefined)
      return -this.get$_wheelDeltaX(receiver);
    else if (receiver.detail !== undefined) {
      if (receiver.axis !== undefined && receiver.axis == MouseScrollEvent.HORIZONTAL_AXIS) {
        detail = this.get$_detail(receiver);
        if (detail < 100)
          return -detail * 40;
        return -detail;
      }
      return 0;
    }
    throw $.wrapException($.UnsupportedError$("deltaX is not supported"));
  },
  get$_deltaY: function(receiver) {
    return receiver.deltaY;
  },
  get$_deltaX: function(receiver) {
    return receiver.deltaX;
  },
  get$_wheelDelta: function(receiver) {
    return receiver.wheelDelta;
  },
  get$_wheelDeltaX: function(receiver) {
    return receiver.wheelDeltaX;
  },
  get$_detail: function(receiver) {
    return receiver.detail;
  },
  $isWheelEvent: true,
  $asWheelEvent: null
};

$$.Window = {"": "EventTarget;event=",
  requestAnimationFrame$1: function(receiver, callback) {
    this._ensureRequestAnimationFrame$0(receiver);
    return this._liblib1$_requestAnimationFrame$1(receiver, callback);
  },
  _liblib1$_requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  get$onKeyDown: function(receiver) {
    return $.EventStreamProvider_keydown.forTarget$1(receiver);
  },
  get$onKeyUp: function(receiver) {
    return $.EventStreamProvider_keyup.forTarget$1(receiver);
  },
  get$onMouseDown: function(receiver) {
    return $.EventStreamProvider_mousedown.forTarget$1(receiver);
  },
  get$onMouseMove: function(receiver) {
    return $.EventStreamProvider_mousemove.forTarget$1(receiver);
  },
  get$onMouseUp: function(receiver) {
    return $.EventStreamProvider_mouseup.forTarget$1(receiver);
  },
  get$onMouseWheel: function(receiver) {
    return $._CustomEventStreamProvider__determineMouseWheelEventType.forTarget$1(receiver);
  },
  get$onResize: function(receiver) {
    return $.EventStreamProvider_resize.forTarget$1(receiver);
  },
  get$onTouchEnd: function(receiver) {
    return $.EventStreamProvider_touchend.forTarget$1(receiver);
  },
  get$onTouchMove: function(receiver) {
    return $.EventStreamProvider_touchmove.forTarget$1(receiver);
  },
  get$onTouchStart: function(receiver) {
    return $.EventStreamProvider_touchstart.forTarget$1(receiver);
  }
};

$$.XPathException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$._ClientRect = {"": "Interceptor;height=,left=,right=,top=,width=",
  toString$0: function(receiver) {
    return "(" + $.S(receiver.left) + ", " + $.S(receiver.top) + ", " + $.S(receiver.width) + ", " + $.S(receiver.height) + ")";
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = receiver.left;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$left(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = receiver.top;
      t3 = t2.get$top(other);
      if (t1 == null ? t3 == null : t1 === t3) {
        t1 = receiver.width;
        t3 = t2.get$width(other);
        if (t1 == null ? t3 == null : t1 === t3) {
          t1 = receiver.height;
          t2 = t2.get$height(other);
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  round$0: function(receiver) {
    return $.Rect$($.round$0$nx(receiver.left), $.round$0$nx(receiver.top), $.round$0$nx(receiver.width), $.round$0$nx(receiver.height));
  },
  $isRect: true,
  $asRect: null
};

$$.VersionChangeEvent = {"": "Event;"};

$$.AElement = {"": "StyledElement;"};

$$.AltGlyphElement = {"": "TextPositioningElement;"};

$$.AnimateElement = {"": "AnimationElement;"};

$$.AnimateMotionElement = {"": "AnimationElement;"};

$$.AnimateTransformElement = {"": "AnimationElement;"};

$$.AnimatedEnumeration = {"": "Interceptor;"};

$$.AnimatedLength = {"": "Interceptor;"};

$$.AnimatedLengthList = {"": "Interceptor;"};

$$.AnimatedNumber = {"": "Interceptor;"};

$$.AnimatedNumberList = {"": "Interceptor;"};

$$.AnimatedString = {"": "Interceptor;"};

$$.AnimationElement = {"": "SvgElement;"};

$$.CircleElement = {"": "StyledElement;"};

$$.ClipPathElement = {"": "StyledElement;"};

$$.DefsElement = {"": "StyledElement;"};

$$.DescElement = {"": "StyledElement;"};

$$.EllipseElement = {"": "StyledElement;"};

$$.FEBlendElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEColorMatrixElement = {"": "StyledElement;type=,height=,width=,x=,y="};

$$.FEComponentTransferElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FECompositeElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEConvolveMatrixElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEDiffuseLightingElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEDisplacementMapElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEDistantLightElement = {"": "SvgElement;"};

$$.FEFloodElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEFuncAElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncBElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncGElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncRElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEGaussianBlurElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEImageElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEMergeElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEMergeNodeElement = {"": "SvgElement;"};

$$.FEMorphologyElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEOffsetElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FEPointLightElement = {"": "SvgElement;x=,y="};

$$.FESpecularLightingElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FESpotLightElement = {"": "SvgElement;x=,y="};

$$.FETileElement = {"": "StyledElement;height=,width=,x=,y="};

$$.FETurbulenceElement = {"": "StyledElement;type=,height=,width=,x=,y="};

$$.FilterElement = {"": "StyledElement;height=,width=,x=,y="};

$$.ForeignObjectElement = {"": "StyledElement;height=,width=,x=,y="};

$$.GElement = {"": "StyledElement;"};

$$.ImageElement0 = {"": "StyledElement;height=,width=,x=,y="};

$$.LineElement = {"": "StyledElement;"};

$$.LinearGradientElement = {"": "_GradientElement;"};

$$.MarkerElement = {"": "StyledElement;"};

$$.MaskElement = {"": "StyledElement;height=,width=,x=,y="};

$$.MetadataElement = {"": "SvgElement;"};

$$.PathElement = {"": "StyledElement;"};

$$.PatternElement = {"": "StyledElement;height=,width=,x=,y="};

$$.PolygonElement = {"": "StyledElement;"};

$$.PolylineElement = {"": "StyledElement;"};

$$.RadialGradientElement = {"": "_GradientElement;"};

$$.RectElement = {"": "StyledElement;height=,width=,x=,y="};

$$.ScriptElement0 = {"": "SvgElement;type="};

$$.SetElement = {"": "AnimationElement;"};

$$.StopElement = {"": "StyledElement;"};

$$.StyleElement0 = {"": "SvgElement;type="};

$$.StyledElement = {"": "SvgElement;"};

$$.SvgDocument = {"": "Document;"};

$$.SvgElement = {"": "Element;",
  get$id: function(receiver) {
    return receiver.id;
  }
};

$$.SvgException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {"": "StyledElement;height=,width=,x=,y="};

$$.SwitchElement = {"": "StyledElement;"};

$$.SymbolElement = {"": "StyledElement;"};

$$.TSpanElement = {"": "TextPositioningElement;"};

$$.TextContentElement = {"": "StyledElement;"};

$$.TextElement = {"": "TextPositioningElement;"};

$$.TextPathElement = {"": "TextContentElement;"};

$$.TextPositioningElement = {"": "TextContentElement;x=,y="};

$$.TitleElement0 = {"": "StyledElement;"};

$$.UseElement = {"": "StyledElement;height=,width=,x=,y="};

$$.ViewElement = {"": "SvgElement;"};

$$.ZoomEvent = {"": "UIEvent;"};

$$._GradientElement = {"": "StyledElement;"};

$$._SVGComponentTransferFunctionElement = {"": "SvgElement;"};

$$.TypedData = {"": "Interceptor;"};

$$.Uint8ClampedList = {"": "Uint8List;",
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout1(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout1: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout1(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout1: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.AudioProcessingEvent = {"": "Event;"};

$$.OfflineAudioCompletionEvent = {"": "Event;"};

$$.ContextEvent = {"": "Event;"};

$$.SqlError = {"": "Interceptor;"};

$$.SqlException = {"": "Interceptor;"};

// Bound closures
$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

$$.BoundClosure$i1 = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  }
};

$$.Closure$main = {"": "Closure;call$0,$name"};

$$.Closure$_processWorkerMessage = {"": "Closure;call$2,$name"};

$$.Closure$wrapException = {"": "Closure;call$1,$name"};

$$.Closure$toStringWrapper = {"": "Closure;call$0,$name"};

$$.Closure$invokeClosure = {"": "Closure;call$5,$name"};

$$.Closure$typeNameInChrome = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInSafari = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInOpera = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInFirefox = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInIE = {"": "Closure;call$1,$name"};

$$.Closure$constructorNameFallback = {"": "Closure;call$1,$name"};

$$.Closure$_asyncRunCallback = {"": "Closure;call$0,$name"};

$$.Closure$compare = {"": "Closure;call$2,$name"};

$$.Closure$_determineMouseWheelEventType = {"": "Closure;call$1,$name"};

$$.Closure$min = {"": "Closure;call$2,$name"};

$$.Closure$deliverChangesSync = {"": "Closure;call$0,$name"};

$$.Closure$defaultObserveUnhandledError = {"": "Closure;call$4,$name"};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.AnalogClock$ = function(canvas, context) {
  return new $.AnalogClock(null, null, null, 6, 6, 30, "Analog Clock", "A simple clock generated entirely with paths.", canvas, context);
};

$.Ring$ = function(x, y, radius, maxRadius, red, green, blue, alpha, multiplier) {
  return new $.Ring(x, y, red, green, blue, radius, maxRadius, multiplier, alpha);
};

$.Rings$ = function(canvas, context, maxRings) {
  var t1 = new $.Rings($.Random_Random(null), null, "Rings", "A particle system example.", canvas, context);
  t1.Rings$3(canvas, context, maxRings);
  return t1;
};

$.Gallery$ = function() {
  var t1 = new $.Gallery(null, null, null, null, null, null);
  t1.Gallery$0();
  return t1;
};

$.main = function() {
  $.gallery = $.Gallery$();
  var t1 = $.List_List($, $.JSString);
  t1.$builtinTypeInfo = [$.JSString];
  $.galleryItems = $.toObservable(t1);
  t1 = $.gallery.elements;
  t1 = $.HashMapKeyIterable$(t1, $.getRuntimeTypeArgument(t1, t1.$asHashMap, 0));
  t1.forEach$1(t1, new $.main_closure());
  $.gallery.swapTo$1($.get$last$ax($.galleryItems));
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.getInterceptor(src).$isJavaScriptIndexingBehavior))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.getInterceptor(dst).$isJavaScriptIndexingBehavior)
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if ($.JSNumber_methods.$lt(srcStart, dstStart))
    for (i = srcStart + count - 1, j = $.$sub$n($.$add$ns(dstStart, count), 1), t1 = $.getInterceptor$asx(src); i >= srcStart; --i, j = $.$sub$n(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t1 = $.getInterceptor$asx(src), j = dstStart, i = srcStart; i < srcStart + count; ++i, j = $.$add$ns(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
};

$.SubListIterable$ = function(_iterable, _start, _endOrLength, E) {
  var t1 = new $.SubListIterable(_iterable, _start, _endOrLength);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.ListIterator$ = function(iterable) {
  return new $.ListIterator(iterable, $.get$length$asx(iterable), 0, null);
};

$.MappedIterable$ = function(_iterable, _f, S, T) {
  var t1 = new $.MappedIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedIterator$ = function(_iterator, _f) {
  return new $.MappedIterator(null, _iterator, _f);
};

$.IterableMixinWorkaround_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0();)
    f.call$1(t1.get$current());
};

$.IterableMixinWorkaround_reduce = function(iterable, combine) {
  var iterator, value;
  iterator = $.JSArray_methods.get$iterator(iterable);
  if (!iterator.moveNext$0())
    throw $.wrapException($.StateError$("No elements"));
  value = iterator._liblib$_current;
  for (; iterator.moveNext$0();)
    value = combine.call$2(value, iterator._liblib$_current);
  return value;
};

$.IterableMixinWorkaround__rangeCheck = function(list, start, end) {
  var t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) || t1.$gt(start, list.length))
    throw $.wrapException($.RangeError$range(start, 0, list.length));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) || t1.$gt(end, list.length))
    throw $.wrapException($.RangeError$range(end, start, list.length));
};

$.IterableMixinWorkaround_setRangeList = function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = $.$sub$n(end, start);
  if ($.$eq($length, 0))
    return;
  if (skipCount < 0)
    throw $.wrapException($.ArgumentError$(skipCount));
  otherStart = skipCount;
  otherList = from;
  if (typeof $length !== "number")
    throw $.iae($length);
  if ($.JSNumber_methods.$gt(otherStart + $length, $.get$length$asx(otherList)))
    throw $.wrapException($.StateError$("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
};

$.ToString__emitValue = function(i, result, visiting) {
  var t1, isList, t2, first, e;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, i);
  isList = typeof i === "object" && i !== null && (i.constructor === Array || !!$.getInterceptor(i).$isList);
  result.write$1(isList ? "[" : "{");
  for (t2 = $.get$iterator$ax(i), first = true; t2.moveNext$0() === true; first = false) {
    e = t2.get$current();
    if (!first)
      result.write$1(", ");
    $.ToString__emitObject(e, result, visiting);
  }
  result.write$1(isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isIterable)) {
    o;
    if ($.ToString__containsRef(visiting, o))
      result.write$1(typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitValue(o, result, visiting);
  } else if (typeof o === "object" && o !== null && !!$.getInterceptor(o).$isMap)
    if ($.ToString__containsRef(visiting, o))
      result.write$1("{...}");
    else
      $.ToString__emitPair(o, result, visiting);
  else
    result.write$1(o);
};

$.ToString__containsRef = function(i, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(i); t1.moveNext$0() === true;)
    if (t1.get$current() === ref)
      return true;
  return false;
};

$.ToString__emitPair = function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  result.write$1("{");
  t1.first_0 = true;
  m.forEach$1(m, new $.ToString__emitPair_closure(t1, result, visiting));
  result.write$1("}");
  t2.removeLast$0(visiting);
};

$.HashMap__findBucketIndex = function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key))
      return i;
  return -1;
};

$.HashMapKeyIterable$ = function(_map, E) {
  var t1 = new $.HashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.HashMapKeyIterator$ = function(_map, _keys) {
  return new $.HashMapKeyIterator(_map, _keys, 0, null);
};

$.LinkedHashMap__findBucketIndex = function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_key(), key))
      return i;
  return -1;
};

$.LinkedHashMapCell$ = function(_key, _value) {
  return new $.LinkedHashMapCell(_key, _value, null, null);
};

$.LinkedHashMapKeyIterable$ = function(_map, E) {
  var t1 = new $.LinkedHashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.LinkedHashMapKeyIterator$ = function(_map, _modifications) {
  var t1 = new $.LinkedHashMapKeyIterator(_map, _modifications, null, null);
  t1.LinkedHashMapKeyIterator$2(_map, _modifications);
  return t1;
};

$.getInterceptor = function(object) {
};

$.getDispatchProperty = function(object) {
  return object[$.dispatchPropertyName];
};

$.setDispatchProperty = function(object, value) {
  Object.defineProperty(object, $.dispatchPropertyName, {value: value, enumerable: false, writable: true, configurable: true});
};

$.getNativeInterceptor = function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
};

$.initializeDispatchProperty = function(setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  if (typeof rootProperty !== "string")
    return $.initializeDispatchProperty$bailout(1, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor);
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    if (i > 0)
      property = rootProperty + "_" + i;
    else
      property = rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, {i: jsObjectInterceptor, p: objectProto, e: null});
      return;
    }
  }
};

$.initializeDispatchProperty$bailout = function(state0, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    property = i > 0 ? rootProperty + "_" + i : rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, {i: jsObjectInterceptor, p: objectProto, e: null});
      return;
    }
  }
};

$.JsIsolateSink$fromPort = function(_port) {
  return new $.JsIsolateSink(false, _port);
};

$.startRootIsolate = function(entry) {
  var rootContext;
  $globalState = $._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._Manager$ = function(entry) {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue($._IsolateEvent), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException($.UnsupportedError$("Cannot extract URI from \"" + $.S(stack) + "\""));
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, functionName, entryPoint, replyTo, context, t2, values;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : $[functionName];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      t1 = $globalState.topEventLoop;
      t1.enqueue$3;
      t1.events._add$1($._IsolateEvent$(context, new $.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      values = $.Primitives_getProperty(sender, "expando$values");
      t1.remove$1(t1, values == null ? null : $.Primitives_getProperty(values, t2._getKey$0()));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg]));
        t1.postMessage$1;
        self.postMessage(t2);
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg]));
    t1.postMessage$1;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $._StackTrace$(exception.stack);
      throw $.wrapException($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { $.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports, $.JSArray).then$1(new $._waitForPendingPorts_closure(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return $.get$globalThis().setTimeout != null;
};

$.checkGrowable = function(list, reason) {
  if (!!list.fixed$length)
    throw $.wrapException($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$add$ns($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === void 0)
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_getYear = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCFullYear() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getFullYear() + 0;
  }
  return t1;
};

$.Primitives_getMonth = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCMonth() + 1;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getMonth() + 1;
  }
  return t1;
};

$.Primitives_getDay = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCDate() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getDate() + 0;
  }
  return t1;
};

$.Primitives_getHours = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCHours() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getHours() + 0;
  }
  return t1;
};

$.Primitives_getMinutes = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCMinutes() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getMinutes() + 0;
  }
  return t1;
};

$.Primitives_getSeconds = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCSeconds() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getSeconds() + 0;
  }
  return t1;
};

$.Primitives_getMilliseconds = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCMilliseconds() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getMilliseconds() + 0;
  }
  return t1;
};

$.Primitives_getProperty = function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  return object[key];
};

$.Primitives_setProperty = function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  object[key] = value;
};

$.iae = function(argument) {
  throw $.wrapException($.ArgumentError$(argument));
};

$.ioore = function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.throwExpression($.ArgumentError$(index));
  throw $.wrapException($.RangeError$value(index));
};

$.wrapException = function(ex) {
  var wrapper = $.DartError$(ex == null ? $.C_NullThrownError : ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException$closure);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.throwExpression = function(ex) {
  throw $.wrapException(ex);
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") || t1.$eq(type, "called_non_callable") || t1.$eq(type, "non_object_property_call") || t1.$eq(type, "non_object_property_load");
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method"))
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number >> 16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1) {
      message;
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    }
    return $._ExceptionImplementation$(t1 ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$._StackTrace$ = function(_stack) {
  return new $._StackTrace(_stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.JSArray_methods.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$(null, null);
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1, result;
  t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0)) {
    result = isolate.eval$1(new $.invokeClosure_closure(closure));
    $globalState.topEventLoop.run$0();
    return result;
  } else if (t1.$eq(numberOfArguments, 1)) {
    result = isolate.eval$1(new $.invokeClosure_closure0(closure, arg1));
    $globalState.topEventLoop.run$0();
    return result;
  } else if (t1.$eq(numberOfArguments, 2)) {
    result = isolate.eval$1(new $.invokeClosure_closure1(closure, arg1, arg2));
    $globalState.topEventLoop.run$0();
    return result;
  } else
    throw $.wrapException($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($globalState.currentContext, $.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
};

$.interceptedTypeCast = function(value, property) {
  var t1;
  if (value != null)
    t1 = typeof value === "object" && $.getInterceptor(value)[property];
  else
    t1 = true;
  if (t1)
    return value;
  t1 = $.getInterceptor$asx(property);
  $.throwExpression($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + expectedType);
};

$.throwCyclicInit = function(staticName) {
  throw $.wrapException($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  target.$builtinTypeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  return target.$builtinTypeInfo;
};

$.getRuntimeTypeArgument = function(target, substitution, index) {
  var $arguments = $.getRuntimeTypeInfo(target);
  if (substitution != null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $arguments == null ? null : $arguments[index];
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  return $.constructorNameFallback(obj);
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.name;
    if (typeof $name === "string") {
      $name;
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    } else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.getFunctionForTypeNameOf = function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox$closure;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari$closure;
  else
    return $.constructorNameFallback$closure;
};

$.toStringForNativeObject = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return "Instance of " + $._getTypeNameOf.call$1(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.defineNativeMethods = function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
};

$.defineNativeMethodsNonleaf = function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
};

$.defineNativeMethodsCommon = function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
};

$.defineNativeMethodsFinish = function() {
};

$.lookupDispatchRecord = function(obj) {
  var hasOwnPropertyFunction, tag, map, interceptor, secondTag;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  tag = $._getTypeNameOf.call$1(obj);
  map = $.interceptorsByTag;
  interceptor = hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null) {
      map = $.interceptorsByTag;
      interceptor = hasOwnPropertyFunction.call(map, secondTag) ? map[secondTag] : null;
    }
  }
  if (interceptor == null)
    interceptor = {__what: "interceptor not found", __tag: tag};
  if (true === $.leafTags[tag])
    return {i: interceptor, p: false, e: null};
  else
    return {i: interceptor, p: Object.getPrototypeOf(obj), e: null};
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i, t1;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result._contents = result._contents + to;
      for (i = 0; i < $length; ++i) {
        t1 = receiver[i];
        result._contents = result._contents + t1;
        result._contents = result._contents + to;
      }
      return result._contents;
    }
  else
    return receiver.replace(new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
};

$._attachStackTrace = function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
};

$.getAttachedStackTrace = function(o) {
  var t1, values;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  values = $.Primitives_getProperty(o, "expando$values");
  return values == null ? null : $.Primitives_getProperty(values, t1._getKey$0());
};

$._asyncRunCallback = function() {
  var callbacks, i, callback, remainingCallbacks, newCallbacks, exception;
  for (; $.get$_asyncCallbacks().length !== 0;) {
    callbacks = $.get$_asyncCallbacks();
    $._asyncCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(callbacks)); i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(callbacks, i);
      $.$indexSet$ax(callbacks, i, null);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        i = $.$add$ns(i, 1);
        remainingCallbacks = $.sublist$1$ax(callbacks, i);
        newCallbacks = $.get$_asyncCallbacks();
        $._asyncCallbacks = [];
        $.JSArray_methods.addAll$1($.get$_asyncCallbacks(), remainingCallbacks);
        $.JSArray_methods.addAll$1($.get$_asyncCallbacks(), newCallbacks);
        $.Timer_run($._asyncRunCallback$closure);
        throw exception;
      }

    }
  }
  $._callbacksAreEnqueued = false;
};

$._AsyncCompleter$ = function(T) {
  var t1 = new $._AsyncCompleter($._FutureImpl$(T), false);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function(T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$immediate = function(value, T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._FutureImpl$immediate$1(value, T);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures, T) {
  var t1, t2, t3, future, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.JSArray_methods.get$iterator(futures); t3.moveNext$0();) {
    future = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    future.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_closure(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0))
    return $._FutureImpl$immediate($.List_empty, null);
  t1.values_1 = $.List_List(t1.remaining_2, null);
  t1.completer_0 = $._AsyncCompleter$($.JSArray);
  return t1.completer_0.future;
};

$._ThenFuture$ = function(_onValue, S, T) {
  var t1 = new $._ThenFuture(_onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._CatchErrorFuture$ = function(_onError, _test, T) {
  var t1 = new $._CatchErrorFuture(_test, _onError, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SubscribeFuture$ = function(onValue, _onError, S, T) {
  var t1 = new $._SubscribeFuture(_onError, onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._asyncError = function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
};

$.Timer_run = function(callback) {
  var milliseconds;
  $.get$Timer__runCallbacks().push(callback);
  if ($.get$Timer__runCallbacks().length === 1) {
    milliseconds = $.JSNumber_methods.$tdiv($.Duration_0._duration, 1000);
    if (milliseconds < 0)
      milliseconds = 0;
    $.TimerImpl$(milliseconds, new $.Timer_run_closure());
  }
};

$.HashMap$ = function(K, V) {
  var t1 = new $.HashMap(0, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.LinkedHashMap$ = function(K, V) {
  var t1 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.Queue_Queue = function(E) {
  return $.ListQueue$(null, E);
};

$.ListQueue$ = function(initialCapacity, E) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.ListQueue$1(initialCapacity, E);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  return $.JSNull_methods.$and(number, $.JSNull_methods.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var nextNumber;
  number = $.JSNull_methods.$shl(number, 2) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$._ListQueueIterator$ = function(queue) {
  return new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
};

$._SplayTreeNode$ = function(key) {
  return new $._SplayTreeNode(key, null, null);
};

$._SplayTreeMapNode$ = function(key, value) {
  return new $._SplayTreeMapNode(value, key, null, null);
};

$.SplayTreeMap$ = function(compare, K, V) {
  var t1 = compare == null ? $.Comparable_compare$closure : compare;
  t1 = new $.SplayTreeMap(t1, null, $._SplayTreeNode$(null), 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$._SplayTreeKeyIterable$ = function(_tree, K) {
  var t1 = new $._SplayTreeKeyIterable(_tree);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._SplayTreeValueIterable$ = function(_map, K, V) {
  var t1 = new $._SplayTreeValueIterable(_map);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$._SplayTreeKeyIterator$ = function(map) {
  var t1 = new $._SplayTreeKeyIterator(map, [], map._modificationCount, map._splayCount, null);
  t1._SplayTreeIterator$1(map);
  return t1;
};

$._SplayTreeValueIterator$ = function(map) {
  var t1 = new $._SplayTreeValueIterator(map, [], map._modificationCount, map._splayCount, null);
  t1._SplayTreeIterator$1(map);
  return t1;
};

$._SplayTreeNodeIterator$ = function(map) {
  var t1 = new $._SplayTreeNodeIterator(map, [], map._modificationCount, map._splayCount, null);
  t1._SplayTreeIterator$1(map);
  return t1;
};

$.Comparable_compare = function(a, b) {
  return $.compareTo$1$ns(a, b);
};

$.DateTime_DateTime$now = function() {
  return $.DateTime$_now();
};

$.DateTime$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
};

$.DateTime$_now = function() {
  var t1 = new $.DateTime($.Primitives_dateNow(), false);
  t1.DateTime$_now$0();
  return t1;
};

$.Duration$ = function(days, hours, microseconds, milliseconds, minutes, seconds) {
  if (typeof microseconds !== "number")
    throw $.iae(microseconds);
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
};

$.Error_safeToString = function(object) {
  var t1;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string") {
    t1 = $.JSString_methods.replaceAll$2(object, "\\", "\\\\");
    t1 = $.stringReplaceAllUnchecked(t1, "\n", "\\n");
    t1 = $.stringReplaceAllUnchecked(t1, "\r", "\\r");
    return "\"" + $.stringReplaceAllUnchecked(t1, "\"", "\\\"") + "\"";
  }
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.RangeError$range = function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.Expando$ = function($name) {
  return new $.Expando($name);
};

$.List_List = function($length, E) {
  var t1, result;
  t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.List_List$from = function(other, growable, E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = $.List_List($, E);
  list.$builtinTypeInfo = [E];
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = $.List_List($length, E);
  fixedList.$builtinTypeInfo = [E];
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    t3 = list[i];
    if (i >= t2)
      throw $.ioore(i);
    fixedList[i] = t3;
  }
  return fixedList;
};

$.Map_Map = function(K, V) {
  return $.HashMap$(K, V);
};

$.Object$ = function() {
  return new $.Object();
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.document = function() {
  return document;
};

$.query = function(selector) {
  return document.querySelector(selector);
};

$.Element__determineMouseWheelEventType = function(e) {
  if (e.onwheel !== undefined)
    return "wheel";
  else if (e.onmousewheel !== undefined)
    return "mousewheel";
  else
    return "DOMMouseScroll";
};

$._EventStream$ = function(_target, _eventType, _useCapture, T) {
  var t1 = new $._EventStream(_target, _eventType, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture);
  return t1;
};

$.Point$ = function(x, y) {
  return new $.Point(x, y);
};

$.Rect$ = function(left, $top, width, height) {
  return new $.Rect(left, $top, width, height);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.get$length$asx(array), -1, null);
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  dict.forEach$1(dict, new $.convertDartToNative_Dictionary_closure(object));
  return object;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.min = function(a, b) {
  if (typeof a === "number") {
    a;
    if (typeof b === "number") {
      b;
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        b;
        if (typeof a === "number") {
          a;
          if (a === 0)
            return (a + b) * a * b;
        }
        if (a === 0 && $.JSDouble_methods.get$isNegative(b) || $.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      return a;
    }
    throw $.wrapException($.ArgumentError$(b));
  }
  throw $.wrapException($.ArgumentError$(a));
};

$.pow = function(x, exponent) {
  if (typeof x !== "number")
    $.throwExpression($.ArgumentError$(x));
  return Math.pow(x, exponent);
};

$.sqrt = function(x) {
  return Math.sqrt(x);
};

$.Random_Random = function(seed) {
  return $.C__Random;
};

$._Lists_getRange = function(a, start, end, accumulator) {
  var i;
  if (start !== (start | 0))
    return $._Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof end !== "number")
    return $._Lists_getRange$bailout(1, a, start, end, accumulator);
  if (start < 0)
    throw $.wrapException($.RangeError$value(start));
  if (end < start)
    throw $.wrapException($.RangeError$value(end));
  if (end > a.length)
    throw $.wrapException($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$._Lists_getRange$bailout = function(state0, a, start, end, accumulator) {
  var t1, i;
  if ($.$lt$n(start, 0))
    throw $.wrapException($.RangeError$value(start));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start))
    throw $.wrapException($.RangeError$value(end));
  if (t1.$gt(end, a.length))
    throw $.wrapException($.RangeError$value(end));
  for (i = start; $.$lt$n(i, end); ++i) {
    if (i >>> 0 !== i || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.GameLoop_timeStampToSeconds = function(timeStamp) {
  if (typeof timeStamp !== "number")
    throw timeStamp.$div();
  return timeStamp / 1000;
};

$.DigitalButton$ = function(buttonId) {
  return new $.DigitalButton(buttonId, 0, 0, 0, 0);
};

$.DigitalButtonEvent$ = function(buttonId, down, frame, time) {
  return new $.DigitalButtonEvent(down, frame, buttonId, time);
};

$.GameLoopGamepad$ = function(gameLoop) {
  return new $.GameLoopGamepad(gameLoop, null, null);
};

$.GameLoopHtml$ = function(element) {
  var t1, t2, t3, t4;
  t1 = $.List_List($, $._GameLoopTouchEvent);
  $.setRuntimeTypeInfo(t1, [$._GameLoopTouchEvent]);
  t2 = $.List_List($, $.KeyboardEvent);
  $.setRuntimeTypeInfo(t2, [$.KeyboardEvent]);
  t3 = $.List_List($, $.MouseEvent);
  $.setRuntimeTypeInfo(t3, [$.MouseEvent]);
  t4 = $.List_List($, $.GameLoopTimer);
  $.setRuntimeTypeInfo(t4, [$.GameLoopTimer]);
  t4 = new $.GameLoopHtml(element, 0, false, false, null, 0, false, 0, false, false, false, 0.03, 0, 0, 0, 0.05, null, null, null, null, null, null, t1, t2, t3, null, null, null, null, null, null, 0.015, 0.03, t4, null);
  t4.GameLoopHtml$1(element);
  return t4;
};

$.Keyboard$ = function(gameLoop) {
  var t1 = new $.Keyboard(gameLoop, $.Map_Map($.JSInt, $.DigitalButton));
  t1.DigitalInput$2(gameLoop, $.get$Keyboard__buttonIds());
  return t1;
};

$.GameLoopMouseEvent$ = function(x, y, dx, dy, clampX, clampY, withinCanvas, time, frame) {
  return new $.GameLoopMouseEvent(x, y, dx, dy, clampX, clampY, time, withinCanvas, frame);
};

$.Mouse$ = function(gameLoop) {
  var t1 = new $.Mouse(0, 0, 0, 0, 0, 0, 0, 0, false, 0, 0, gameLoop, $.Map_Map($.JSInt, $.DigitalButton));
  t1.DigitalInput$2(gameLoop, $.get$Mouse__buttonIds());
  return t1;
};

$.PointerLock$ = function(gameLoop) {
  var t1 = new $.PointerLock(gameLoop, true);
  t1.PointerLock$1(gameLoop);
  return t1;
};

$._GameLoopTouchEvent$ = function($event, type) {
  return new $._GameLoopTouchEvent($event, type);
};

$.GameLoopTouchPosition$ = function(x, y, dx, dy, time, frame) {
  return new $.GameLoopTouchPosition(x, y, dx, dy, time, frame);
};

$.GameLoopTouch$ = function(id) {
  var t1 = $.List_List($, $.GameLoopTouchPosition);
  $.setRuntimeTypeInfo(t1, [$.GameLoopTouchPosition]);
  return new $.GameLoopTouch(id, t1);
};

$.GameLoopTouchSet$ = function(gameLoop) {
  return new $.GameLoopTouchSet($.Map_Map($.JSInt, $.GameLoopTouch), gameLoop);
};

$.ObservableList$ = function($length, E) {
  var t1, t2;
  if ($length != null) {
    t1 = $.List_List($length, E);
    $.setRuntimeTypeInfo(t1, [E]);
  } else
    t1 = [];
  t2 = $.$add$ns($.Observable_$_nextHashCode, 1);
  $.Observable_$_nextHashCode = t2;
  t2 = new $.ObservableList(t1, null, null, t2);
  $.setRuntimeTypeInfo(t2, [E]);
  return t2;
};

$.ChangeRecord$ = function(type, key, oldValue, newValue) {
  return new $.ChangeRecord(type, key, oldValue, newValue);
};

$.toObservable = function(value) {
  var t1 = $.ObservableList$(null, null);
  t1.addAll$1(t1, value);
  return t1;
  return value;
};

$.hasObservers = function($self) {
  var t1 = $self.get$$$_observers();
  return t1 != null && $.get$head$x(t1) != null;
};

$.observeReads = function() {
  return $._activeObserver != null;
};

$.notifyRead = function($self, type, key) {
  return $._activeObserver._addRead$3($self, type, key);
};

$.notifyChange = function($self, type, key, oldValue, newValue) {
  if ((type & 14) === 0)
    if ($.$eq(oldValue, newValue))
      return;
  if ($._changedObjects == null) {
    $._changedObjects = [];
    $.setImmediate($.deliverChangesSync$closure);
  }
  if ($self.get$$$_changes() == null) {
    $self.set$$$_changes([]);
    $.add$1$ax($._changedObjects, $self);
  }
  $.add$1$ax($self.get$$$_changes(), $.ChangeRecord$(type, key, oldValue, newValue));
};

$.deliverChangesSync = function() {
  var observable, changes, observer, error, trace, iterations, t1, t2, changedExpressions, iterations0, n, exception;
  iterations = 0;
  while (true) {
    t1 = $._changedObjects;
    t2 = t1 == null;
    if (!(!t2 || $._changedExpressions != null))
      break;
    $._changedObjects = null;
    changedExpressions = $._changedExpressions;
    $._changedExpressions = null;
    iterations0 = iterations + 1;
    if (iterations === $.circularNotifyLimit) {
      $._diagnoseCircularLimit(t1, changedExpressions);
      return;
    }
    if (!t2)
      for (t1 = $.get$iterator$ax(t1); t1.moveNext$0();) {
        observable = t1.get$current();
        changes = observable.get$$$_changes();
        observable.set$$$_changes(null);
        for (n = $.get$head$x(observable.get$$$_observers()); n != null; n = n.get$next()) {
          observer = $.get$value$x(n);
          try {
            observer.call$1(changes);
          } catch (exception) {
            t2 = $.unwrapException(exception);
            error = t2;
            trace = $._StackTrace$(exception.stack);
            $.onObserveUnhandledError.call$4(error, trace, observer, "from " + $.S(observable));
          }

        }
      }
    if (changedExpressions != null)
      $.JSNull_methods.forEach$1(changedExpressions, new $.deliverChangesSync_closure());
    iterations = iterations0;
  }
};

$._diagnoseCircularLimit = function(changedObjects, changedExpressions) {
  var trace, t1, observable, changes, exprObserver, change, t2, msg;
  trace = [];
  if (changedObjects != null)
    for (t1 = $.get$iterator$ax(changedObjects); t1.moveNext$0();) {
      observable = t1.get$current();
      changes = observable.get$$$_changes();
      trace.push($.S(observable) + " " + $.S(changes));
    }
  if (changedExpressions != null)
    for (t1 = $.get$iterator$ax($.JSNull_methods.get$values(changedExpressions)); t1.moveNext$0() === true;) {
      exprObserver = t1.get$current();
      change = exprObserver._deliver$0();
      if (change != null)
        trace.push($.S(exprObserver) + " " + $.S(change));
    }
  $._changedObjects = null;
  $._changedExpressions = null;
  t1 = "exceeded notifiction limit of " + $.circularNotifyLimit + ", possible circular reference in observer callbacks: ";
  t2 = $.SubListIterable$(trace, 0, 10, null);
  msg = t1 + t2.join$1(t2, ", ");
  $.get$onCircularNotifyLimit().call$1(msg);
};

$.defaultObserveUnhandledError = function(error, trace, obj, message) {
  $.Primitives_printString("web_ui.observe: unhandled error calling " + $.S(obj) + " " + $.S(message) + ".\nerror:\n" + $.S(error) + "\n\nstack trace:\n" + $.S(trace));
};

$.hash4 = function(w, x, y, z) {
  var t1, t2, t3;
  t1 = $.JSInt_methods.get$hashCode(w);
  t2 = $.get$hashCode$(x);
  if (typeof t2 !== "number")
    throw $.iae(t2);
  t3 = $.$add$ns($.$mul$n($.get$hashCode$(y), 31), $.get$hashCode$(z));
  t2 = $.JSNumber_methods.get$hashCode(t1 * 31 + t2);
  t3 = $.get$hashCode$(t3);
  if (typeof t3 !== "number")
    throw $.iae(t3);
  return t2 * 31 + t3;
};

$.setImmediate = function(callback) {
  var port = $.ReceivePortImpl$();
  port._callback = new $.setImmediate_closure(callback, port);
  $._NativeJsSendPort$(port, $.get$id$x($globalState.currentContext)).send$1(null);
};

$.main$closure = new $.Closure$main($.main, "main$closure");
$.IsolateNatives__processWorkerMessage$closure = new $.Closure$_processWorkerMessage($.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
$.wrapException$closure = new $.Closure$wrapException($.wrapException, "wrapException$closure");
$.DartError_toStringWrapper$closure = new $.Closure$toStringWrapper($.DartError_toStringWrapper, "DartError_toStringWrapper$closure");
$.invokeClosure$closure = new $.Closure$invokeClosure($.invokeClosure, "invokeClosure$closure");
$.typeNameInChrome$closure = new $.Closure$typeNameInChrome($.typeNameInChrome, "typeNameInChrome$closure");
$.typeNameInSafari$closure = new $.Closure$typeNameInSafari($.typeNameInSafari, "typeNameInSafari$closure");
$.typeNameInOpera$closure = new $.Closure$typeNameInOpera($.typeNameInOpera, "typeNameInOpera$closure");
$.typeNameInFirefox$closure = new $.Closure$typeNameInFirefox($.typeNameInFirefox, "typeNameInFirefox$closure");
$.typeNameInIE$closure = new $.Closure$typeNameInIE($.typeNameInIE, "typeNameInIE$closure");
$.constructorNameFallback$closure = new $.Closure$constructorNameFallback($.constructorNameFallback, "constructorNameFallback$closure");
$._asyncRunCallback$closure = new $.Closure$_asyncRunCallback($._asyncRunCallback, "_asyncRunCallback$closure");
$.Comparable_compare$closure = new $.Closure$compare($.Comparable_compare, "Comparable_compare$closure");
$.Element__determineMouseWheelEventType$closure = new $.Closure$_determineMouseWheelEventType($.Element__determineMouseWheelEventType, "Element__determineMouseWheelEventType$closure");
$.min$closure = new $.Closure$min($.min, "min$closure");
$.deliverChangesSync$closure = new $.Closure$deliverChangesSync($.deliverChangesSync, "deliverChangesSync$closure");
$.defaultObserveUnhandledError$closure = new $.Closure$defaultObserveUnhandledError($.defaultObserveUnhandledError, "defaultObserveUnhandledError$closure");
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$.EventStreamProvider_mouseup = new $.EventStreamProvider("mouseup");
$.EventStreamProvider_mousemove = new $.EventStreamProvider("mousemove");
$._CustomEventStreamProvider__determineMouseWheelEventType = new $._CustomEventStreamProvider($.Element__determineMouseWheelEventType$closure);
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.EventStreamProvider_resize = new $.EventStreamProvider("resize");
$.EventStreamProvider_touchstart = new $.EventStreamProvider("touchstart");
$.EventStreamProvider_webkitpointerlockchange = new $.EventStreamProvider("webkitpointerlockchange");
$.EventStreamProvider_webkitfullscreenchange = new $.EventStreamProvider("webkitfullscreenchange");
$.EventStreamProvider_webkitfullscreenerror = new $.EventStreamProvider("webkitfullscreenerror");
$.Window_methods = $.Window.prototype;
$.Duration_0 = new $.Duration(0);
$.JSNull_methods = $.JSNull.prototype;
$.Uint8ClampedList_methods = $.Uint8ClampedList.prototype;
$.C_NullThrownError = new $.NullThrownError();
$.JSDouble_methods = $.JSDouble.prototype;
$.EventStreamProvider_keyup = new $.EventStreamProvider("keyup");
$.EventStreamProvider_touchend = new $.EventStreamProvider("touchend");
$.EventStreamProvider_touchmove = new $.EventStreamProvider("touchmove");
$.EventStreamProvider_mousedown = new $.EventStreamProvider("mousedown");
$.EventStreamProvider_click = new $.EventStreamProvider("click");
$.HtmlDocument_methods = $.HtmlDocument.prototype;
$.EventStreamProvider_keydown = new $.EventStreamProvider("keydown");
$.C_CloseToken = new $.CloseToken();
$.JSInt_methods = $.JSInt.prototype;
$.JSArray_methods = $.JSArray.prototype;
$.C__Random = new $._Random();
$.gallery = null;
$.galleryItems = null;
$.Expando__keyCount = 0;
$.dispatchPropertyName = null;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.interceptorsByTag = null;
$.leafTags = null;
$._callbacksAreEnqueued = false;
$.Observable_$_nextHashCode = 0;
$._activeObserver = null;
$.circularNotifyLimit = 100;
$._changedObjects = null;
$._changedExpressions = null;
$.onObserveUnhandledError = $.defaultObserveUnhandledError$closure;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$changedTouches$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$changedTouches(receiver);
};
$.get$context2D$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$context2D(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$head$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$head(receiver);
};
$.get$height$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$height(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$key$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$key(receiver);
};
$.get$last$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$last(receiver);
};
$.get$left$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$left(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$onClick$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onClick(receiver);
};
$.get$right$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$right(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.get$width$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$width(receiver);
};
$.get$x$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$x(receiver);
};
$.get$y$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$y(receiver);
};
$.preventDefault$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).preventDefault$0(receiver);
};
$.register$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).register$2(receiver, a0, a1);
};
$.round$0$nx = function(receiver) {
  return $.getInterceptor$nx(receiver).round$0(receiver);
};
$.set$height$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$height(receiver, value);
};
$.set$left$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$left(receiver, value);
};
$.set$right$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$right(receiver, value);
};
$.set$value$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$value(receiver, value);
};
$.set$width$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$width(receiver, value);
};
$.sublist$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
$.toDouble$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).toDouble$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$nx = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return $.Expando$(null);
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return $.Expando$("asynchronous error");
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return [];
});
Isolate.$lazy($, "_runCallbacks", "Timer__runCallbacks", "get$Timer__runCallbacks", function() {
  return [];
});
Isolate.$lazy($, "_buttonIds", "Keyboard__buttonIds", "get$Keyboard__buttonIds", function() {
  return [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 16, 17, 18, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 192, 13, 38, 40, 37, 39];
});
Isolate.$lazy($, "_buttonIds", "Mouse__buttonIds", "get$Mouse__buttonIds", function() {
  return [0, 1, 2];
});
Isolate.$lazy($, "onCircularNotifyLimit", "onCircularNotifyLimit", "get$onCircularNotifyLimit", function() {
  return new $.closure();
});
// Native classes
$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("WebKitAnimationEvent", $.AnimationEvent);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("Attr", $.Attr);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("AutocompleteErrorEvent", $.AutocompleteErrorEvent);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("BeforeLoadEvent", $.BeforeLoadEvent);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("CanvasGradient", $.CanvasGradient);

$.defineNativeMethods("CanvasPattern", $.CanvasPattern);

$.defineNativeMethodsNonleaf("CanvasRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethods("CanvasRenderingContext2D", $.CanvasRenderingContext2D);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("CloseEvent", $.CloseEvent);

$.defineNativeMethods("Comment", $.Comment);

$.defineNativeMethods("CompositionEvent", $.CompositionEvent);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("CSSFontFaceLoadEvent", $.CssFontFaceLoadEvent);

$.defineNativeMethods("CustomElementConstructor", $.CustomElementConstructor);

$.defineNativeMethods("CustomEvent", $.CustomEvent);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("DeviceMotionEvent", $.DeviceMotionEvent);

$.defineNativeMethods("DeviceOrientationEvent", $.DeviceOrientationEvent);

$.defineNativeMethods("HTMLDialogElement", $.DialogElement);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("FocusEvent", $.FocusEvent);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HashChangeEvent", $.HashChangeEvent);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("XMLHttpRequestException", $.HttpRequestException);

$.defineNativeMethods("XMLHttpRequestProgressEvent", $.HttpRequestProgressEvent);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("KeyboardEvent", $.KeyboardEvent);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("MediaKeyEvent", $.MediaKeyEvent);

$.defineNativeMethods("MediaStreamEvent", $.MediaStreamEvent);

$.defineNativeMethods("MediaStreamTrackEvent", $.MediaStreamTrackEvent);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("MessageEvent", $.MessageEvent);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("MIDIConnectionEvent", $.MidiConnectionEvent);

$.defineNativeMethods("MIDIMessageEvent", $.MidiMessageEvent);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethodsNonleaf("MouseEvent", $.MouseEvent);

$.defineNativeMethods("MutationEvent", $.MutationEvent);

$.defineNativeMethods("Navigator", $.Navigator);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("OverflowEvent", $.OverflowEvent);

$.defineNativeMethods("PageTransitionEvent", $.PageTransitionEvent);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("PopStateEvent", $.PopStateEvent);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethodsNonleaf("ProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("RangeException", $.RangeException);

$.defineNativeMethods("RTCDataChannelEvent", $.RtcDataChannelEvent);

$.defineNativeMethods("RTCDTMFToneChangeEvent", $.RtcDtmfToneChangeEvent);

$.defineNativeMethods("RTCIceCandidateEvent", $.RtcIceCandidateEvent);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("SecurityPolicyViolationEvent", $.SecurityPolicyViolationEvent);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechInputEvent", $.SpeechInputEvent);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("SpeechRecognitionEvent", $.SpeechRecognitionEvent);

$.defineNativeMethods("SpeechSynthesisEvent", $.SpeechSynthesisEvent);

$.defineNativeMethods("StorageEvent", $.StorageEvent);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("TextEvent", $.TextEvent);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("Touch", $.Touch);

$.defineNativeMethods("TouchEvent", $.TouchEvent);

$.defineNativeMethods("TouchList", $.TouchList);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("TrackEvent", $.TrackEvent);

$.defineNativeMethods("TransitionEvent|WebKitTransitionEvent", $.TransitionEvent);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("MouseScrollEvent|MouseWheelEvent|WheelEvent", $.WheelEvent);

$.defineNativeMethods("DOMWindow|Window", $.Window);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("ClientRect", $._ClientRect);

$.defineNativeMethods("IDBVersionChangeEvent", $.VersionChangeEvent);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedEnumeration", $.AnimatedEnumeration);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethods("SVGAnimatedString", $.AnimatedString);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGZoomEvent", $.ZoomEvent);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._GradientElement);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethodsNonleaf("ArrayBufferView", $.TypedData);

$.defineNativeMethods("Uint8ClampedArray", $.Uint8ClampedList);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8List);

$.defineNativeMethods("AudioProcessingEvent", $.AudioProcessingEvent);

$.defineNativeMethods("OfflineAudioCompletionEvent", $.OfflineAudioCompletionEvent);

$.defineNativeMethods("WebGLContextEvent", $.ContextEvent);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);


var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.initializeDispatchProperty(function(a) {
  $.getDispatchProperty = a;
}, "___dart_dispatch_record_ZxYxX_0_", $.Interceptor.prototype);
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main$closure); });
      } else {
        $.startRootIsolate($.main$closure);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main$closure); });
  } else {
    $.startRootIsolate($.main$closure);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        isolateProperties[cls] = defineClass(name, cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=main.dart.js.map
